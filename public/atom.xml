<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[JP]]></title>
  <link href="httpL://www.jeffmalnick.com/atom.xml" rel="self"/>
  <link href="httpL://www.jeffmalnick.com/"/>
  <updated>2014-07-14T08:00:39-07:00</updated>
  <id>httpL://www.jeffmalnick.com/</id>
  <author>
    <name><![CDATA[Jeff]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Managing Git Repos over Jump Hosts using Persistant Sockets]]></title>
    <link href="httpL://www.jeffmalnick.com/blog/2014/07/14/managing-git-repos-over-jump-hosts-using-persistant-sockets/"/>
    <updated>2014-07-14T07:09:09-07:00</updated>
    <id>httpL://www.jeffmalnick.com/blog/2014/07/14/managing-git-repos-over-jump-hosts-using-persistant-sockets</id>
    <content type="html"><![CDATA[<p>I was recently helping a customer who had a somewhat complicated git workflow to production. All their Puppet code was in a locally accessible Gitlab server which was used by all the Automation dev&rsquo;s to develop, test and push to.</p>

<p>However, their integration and production environments were located behind a jumphost which also required a custom VPN connection.</p>

<p>The problem was that this deployment relied on <a href="https://github.com/adrienthebo/r10k">r10k</a> and the Puppet master needed access to the Gitlab server to create the local environments in both integration and eventually production.</p>

<p>Enabling a streamlined process to move the Gitlab codebase from our dev area into the corralled VM behind the jumphost was needed.</p>

<p>This workflow involves several steps:</p>

<ol>
<li>Connect NA Client VPN to Jumphost</li>
<li>SSH to Jumphost and enter auth credentials</li>
<li>SSH into yum repo server behind jumphost</li>
<li>Enter in yum repo auth credentials</li>
<li>scp your data &ndash; many ways to skin that cat, all are somewhat complicated</li>
</ol>


<h2>Automate with persistant SSH sockets</h2>

<p>I decided to write a SSH script which will do this, and I wanted to ensure we didn&rsquo;t fall into &lsquo;password&rsquo; hell and have to enter in a new password every time. I had heard you could do this by using the &lsquo;ControlMaster&rsquo; SSH param in SSH_config, open a persistant socket, and reuse it as needed. If I could enable this over a jumphost was another question but I gave it a shot.</p>

<ol>
<li><p>Create a persistant socket to jumphost with tunnel on localhost through the jumphost, pushing traffic from port 22 &ndash;> 5000</p>

<pre><code> ssh -o 'ControlMaster auto' -o 'ControlPath ~/.ssh/jump.sock' -N -f -L 5000:[git_repo_ip]:22 root@[jumphost_ip]
</code></pre></li>
<li><p>Create a direct persistant socket to the integration or production Gitlab server on localhost tunnel</p>

<pre><code> ssh -o 'ControlMaster auto' -o 'ControlPath ~/.ssh/git.sock' -N -f root@localhost -p 5000
</code></pre></li>
<li><p>CP arbitrary documents easily</p>

<p> scp -o &lsquo;ControlPath ~/.ssh/yum.sock&rsquo; -P 5000 $filepath root@localhost:/tmp/</p></li>
<li><p>SSH (no password required once socket is created!)</p>

<pre><code> ssh -S ~/.ssh/yum.sock root@localhost -p 5000
</code></pre></li>
<li><p>To destroy the sockets you need to do the yum repo first and jump second</p>

<pre><code> ssh -S ~/.ssh/yum.sock -O exit root@localhost &amp;&amp; ssh -S ~/.ssh/jump.sock -O exit root@172.20.100.11
</code></pre></li>
</ol>


<h2>A quick script</h2>

<p>Now that I can create persistant sockets I wrote a script to SSH into the local git, run <code>rake::restore</code>, scp the backup to my host, scp the backup from my host into the integration git over the jumphost connection, and run rake::restore.</p>

<ol>
<li>Check to ensure I&rsquo;m connected to the correct VPN Gateway</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="nb">test</span> <span class="o">-</span><span class="n">e</span> <span class="o">~</span><span class="sr">/.ssh || { echo &quot;Create an ssh dir&quot;; exit 1; }</span>
</span><span class='line'>
</span><span class='line'><span class="sr"> VPNENV=`echo $(naclient status | awk &#39;NR==4&#39; | cut -d: -f2)`</span>
</span><span class='line'><span class="sr"> VPNREMOTE=&quot;data_center&quot;</span>
</span><span class='line'><span class="sr"> LOCALGIT=&quot;10.10.100.100&quot;</span>
</span><span class='line'><span class="sr"> INTGIT=&quot;172.24.100.10&quot;</span>
</span><span class='line'><span class="sr"> JUMPHOST=&quot;172.20.100.11&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="sr"> if [ &quot;$VPNENV&quot; == &quot;$VPNREMOTE&quot; ]</span>
</span><span class='line'><span class="sr"> then</span>
</span><span class='line'><span class="sr">     echo &quot;Connected to $VPNENV&quot;</span>
</span><span class='line'><span class="sr"> </span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Build the sockets</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="n">echo</span> <span class="s2">&quot;Connecting to local git:&quot;</span>
</span><span class='line'>  <span class="n">ssh</span> <span class="o">-</span><span class="n">o</span> <span class="s1">&#39;ControlMaster auto&#39;</span> <span class="o">-</span><span class="n">o</span> <span class="s1">&#39;ControlPath ~/.ssh/LOCALGIT.sock&#39;</span> <span class="o">-</span><span class="n">N</span> <span class="o">-</span><span class="n">f</span> <span class="n">root</span><span class="err">@</span><span class="vg">$LOCALGIT</span>
</span><span class='line'>  <span class="n">echo</span> <span class="s2">&quot;Connecting to jumphost:&quot;</span>
</span><span class='line'>  <span class="n">ssh</span> <span class="o">-</span><span class="n">o</span> <span class="s1">&#39;ControlMaster auto&#39;</span> <span class="o">-</span><span class="n">o</span> <span class="s1">&#39;ControlPath ~/.ssh/jump.sock&#39;</span> <span class="o">-</span><span class="n">N</span> <span class="o">-</span><span class="n">f</span> <span class="o">-</span><span class="n">L</span> <span class="vg">$PORT</span><span class="p">:</span><span class="vg">$INTGIT</span><span class="p">:</span><span class="mi">22</span> <span class="n">root</span><span class="err">@</span><span class="vg">$JUMPHOST</span>
</span><span class='line'>  <span class="n">echo</span> <span class="s2">&quot;Connecting to git in integration:&quot;</span>
</span><span class='line'>  <span class="n">ssh</span> <span class="o">-</span><span class="n">o</span> <span class="s1">&#39;ControlMaster auto&#39;</span> <span class="o">-</span><span class="n">o</span> <span class="s1">&#39;ControlPath ~/.ssh/intgit.sock&#39;</span> <span class="o">-</span><span class="n">o</span> <span class="s1">&#39;UserKnownHostsFile /dev/null&#39;</span> <span class="o">-</span><span class="n">N</span> <span class="o">-</span><span class="n">f</span> <span class="n">root</span><span class="vi">@localhost</span> <span class="o">-</span><span class="nb">p</span> <span class="vg">$PORT</span>  
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Use the sockets for SSH and SCP</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="n">ssh</span> <span class="o">-</span><span class="n">S</span> <span class="o">~</span><span class="sr">/.ssh/</span><span class="no">LOCALGIT</span><span class="o">.</span><span class="n">sock</span> <span class="n">root</span><span class="err">@</span><span class="vg">$LOCALGIT</span> <span class="n">gitlab</span><span class="o">-</span><span class="n">rake</span> <span class="ss">gitlab</span><span class="p">:</span><span class="ss">backup</span><span class="p">:</span><span class="n">create</span>
</span><span class='line'>  <span class="n">ssh</span> <span class="o">-</span><span class="n">S</span> <span class="o">~</span><span class="sr">/.ssh/</span><span class="no">LOCALGIT</span><span class="o">.</span><span class="n">sock</span> <span class="n">root</span><span class="err">@</span><span class="vg">$LOCALGIT</span> <span class="s2">&quot;$(typeset -f); stagelatest&quot;</span>
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>


<p>A note before moving on about the &lsquo;stagelatest&rsquo; function. I had a complicated command that I didn&rsquo;t want to toss into the SSH line, so I wrote a fuction and ran the <code>$(typeset -f)</code> command to make that function available on the remote SSH shell executing the commands. The function looked like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="n">stagelatest</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="no">LATESTBAK</span><span class="o">=</span><span class="err">$</span><span class="p">(</span><span class="n">ls</span> <span class="o">-</span><span class="n">t</span> <span class="sr">/var/o</span><span class="n">pt</span><span class="o">/</span><span class="n">gitlab</span><span class="o">/</span><span class="n">backups</span><span class="o">/</span> <span class="o">|</span> <span class="n">head</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="n">rm</span> <span class="sr">/tmp/</span><span class="mi">1111111111</span><span class="n">_gitlab_backup</span><span class="o">.</span><span class="n">tar</span>
</span><span class='line'>  <span class="n">ln</span> <span class="o">-</span><span class="n">s</span> <span class="sr">/var/o</span><span class="n">pt</span><span class="o">/</span><span class="n">gitlab</span><span class="o">/</span><span class="n">backups</span><span class="o">/</span><span class="vg">$LATESTBAK</span> <span class="sr">/tmp/</span><span class="mi">1111111111</span><span class="n">_gitlab_backup</span><span class="o">.</span><span class="n">tar</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>


<p>Continuing with our SCP and SSH commands:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="n">scp</span> <span class="o">-</span><span class="n">o</span> <span class="s1">&#39;ControlPath ~/.ssh/LOCALGIT.sock&#39;</span> <span class="n">root</span><span class="err">@</span><span class="vg">$LOCALGIT</span><span class="ss">:/</span><span class="n">tmp</span><span class="o">/</span><span class="mi">1111111111</span><span class="n">_gitlab_backup</span><span class="o">.</span><span class="n">tar</span> <span class="sr">/tmp/</span>
</span><span class='line'>  <span class="n">scp</span> <span class="o">-</span><span class="n">o</span> <span class="s1">&#39;ControlPath ~/.ssh/intgit.sock&#39;</span> <span class="o">-</span><span class="n">P</span> <span class="vg">$PORT</span> <span class="sr">/tmp/</span><span class="mi">1111111111</span><span class="n">_gitlab_backup</span><span class="o">.</span><span class="n">tar</span> <span class="n">root</span><span class="vi">@localhost</span><span class="ss">:/</span><span class="n">var</span><span class="o">/</span><span class="n">opt</span><span class="o">/</span><span class="n">gitlab</span><span class="o">/</span><span class="n">backups</span>
</span><span class='line'>  <span class="n">ssh</span> <span class="o">-</span><span class="n">S</span> <span class="o">~</span><span class="sr">/.ssh/in</span><span class="n">tgit</span><span class="o">.</span><span class="n">sock</span> <span class="n">root</span><span class="vi">@localhost</span> <span class="o">-</span><span class="nb">p</span> <span class="vg">$PORT</span> <span class="no">BACKUP</span><span class="o">=</span><span class="mi">1111111111</span> <span class="n">gitlab</span><span class="o">-</span><span class="n">rake</span> <span class="ss">gitlab</span><span class="p">:</span><span class="ss">backup</span><span class="p">:</span><span class="n">restore</span> <span class="o">&lt;&lt;&lt;</span> <span class="n">yes</span>
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>


<h2>The final script</h2>

<p>My final script includes a cleanup() function that is exectued via <code>trap</code> and at the end of the script on a good run. Cleaning up the sockets and ensuring nothing is left is always good practice.</p>

<p>I also modified my SSH commands to not use the known_hosts file. This way I could reuse the tunnle on localhost:5000 to other jumphost connections inside the corralled integration or production environments. Had I used the known_hosts file every time and not pipped it to <code>/dev/null</code>, everytime I reused localhost:5000 to tunnel to a new server behind the jumphost the public key would change and SSH would think someone is trying to do something funny.</p>

<p>I also include some more logic to really make sure that the rake::restore should run on the integration/production gitlab server. Nerver hurts to double check!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/bin/bash</span>
</span><span class='line'><span class="n">cleanup</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">echo</span> <span class="s2">&quot;Cleaning up sockets and exiting&quot;</span>
</span><span class='line'>  <span class="nb">test</span> <span class="o">-</span><span class="n">e</span> <span class="o">~</span><span class="sr">/.ssh/</span><span class="no">LOCALGIT</span><span class="o">.</span><span class="n">sock</span> <span class="o">&amp;&amp;</span> <span class="n">ssh</span> <span class="o">-</span><span class="n">S</span> <span class="o">~</span><span class="sr">/.ssh/</span><span class="no">LOCALGIT</span><span class="o">.</span><span class="n">sock</span> <span class="o">-</span><span class="n">O</span> <span class="nb">exit</span> <span class="n">root</span><span class="err">@</span><span class="vg">$GITLAB</span>
</span><span class='line'>  <span class="nb">test</span> <span class="o">-</span><span class="n">e</span> <span class="o">~</span><span class="sr">/.ssh/in</span><span class="n">tgit</span><span class="o">.</span><span class="n">sock</span> <span class="o">&amp;&amp;</span> <span class="n">ssh</span> <span class="o">-</span><span class="n">S</span> <span class="o">~</span><span class="sr">/.ssh/in</span><span class="n">tgit</span><span class="o">.</span><span class="n">sock</span> <span class="o">-</span><span class="n">O</span> <span class="nb">exit</span> <span class="n">root</span><span class="vi">@localhost</span>
</span><span class='line'>  <span class="nb">test</span> <span class="o">-</span><span class="n">e</span> <span class="o">~</span><span class="sr">/.ssh/</span><span class="n">jump</span><span class="o">.</span><span class="n">sock</span> <span class="o">&amp;&amp;</span> <span class="n">ssh</span> <span class="o">-</span><span class="n">S</span> <span class="o">~</span><span class="sr">/.ssh/</span><span class="n">jump</span><span class="o">.</span><span class="n">sock</span> <span class="o">-</span><span class="n">O</span> <span class="nb">exit</span> <span class="n">root</span><span class="err">@</span><span class="vg">$JUMPHOST</span>
</span><span class='line'>  <span class="nb">exit</span> <span class="vg">$@</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nb">trap</span> <span class="n">cleanup</span> <span class="no">SIGHUP</span> <span class="no">SIGINT</span> <span class="no">SIGTERM</span>
</span><span class='line'>
</span><span class='line'><span class="n">stagelatest</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="no">LATESTBAK</span><span class="o">=</span><span class="err">$</span><span class="p">(</span><span class="n">ls</span> <span class="o">-</span><span class="n">t</span> <span class="sr">/var/o</span><span class="n">pt</span><span class="o">/</span><span class="n">gitlab</span><span class="o">/</span><span class="n">backups</span><span class="o">/</span> <span class="o">|</span> <span class="n">head</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="n">rm</span> <span class="sr">/tmp/</span><span class="mi">1111111111</span><span class="n">_gitlab_backup</span><span class="o">.</span><span class="n">tar</span>
</span><span class='line'>  <span class="n">ln</span> <span class="o">-</span><span class="n">s</span> <span class="sr">/var/o</span><span class="n">pt</span><span class="o">/</span><span class="n">gitlab</span><span class="o">/</span><span class="n">backups</span><span class="o">/</span><span class="vg">$LATESTBAK</span> <span class="sr">/tmp/</span><span class="mi">1111111111</span><span class="n">_gitlab_backup</span><span class="o">.</span><span class="n">tar</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">getport</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="no">PORT</span><span class="o">=</span><span class="err">$</span><span class="p">((</span> <span class="vg">$RANDOM</span> <span class="o">%</span> <span class="mi">1000</span> <span class="o">+</span> <span class="mi">5000</span> <span class="p">))</span>
</span><span class='line'>  <span class="no">CHECK</span><span class="o">=</span><span class="err">$</span><span class="p">(</span><span class="n">netstat</span> <span class="o">-</span><span class="n">an</span> <span class="o">|</span><span class="n">grep</span> <span class="no">LISTEN</span> <span class="o">|</span> <span class="n">egrep</span> <span class="s2">&quot;[.:]${PORT}</span><span class="se">\s</span><span class="s2">&quot;</span> <span class="o">&gt;</span> <span class="sr">/dev/nu</span><span class="n">ll</span><span class="p">;</span> <span class="n">echo</span> <span class="vg">$?</span><span class="p">)</span>
</span><span class='line'>  <span class="k">while</span> <span class="o">[[</span> <span class="s2">&quot;$CHECK&quot;</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">]]</span>
</span><span class='line'>  <span class="k">do</span>
</span><span class='line'>      <span class="n">echo</span> <span class="s2">&quot;Port: $PORT is in use by another process, choosing another port.&quot;</span>
</span><span class='line'>      <span class="no">PORT</span><span class="o">=</span><span class="err">$</span><span class="p">((</span> <span class="vg">$RANDOM</span> <span class="o">%</span> <span class="mi">1000</span> <span class="o">+</span> <span class="n">port</span> <span class="p">))</span>
</span><span class='line'>
</span><span class='line'>      <span class="no">CHECK</span><span class="o">=</span><span class="err">$</span><span class="p">(</span><span class="n">netstat</span> <span class="o">-</span><span class="n">an</span> <span class="o">|</span><span class="n">grep</span> <span class="no">LISTEN</span> <span class="o">|</span> <span class="n">egrep</span> <span class="s2">&quot;[.:]$PORT</span><span class="se">\s</span><span class="s2">&quot;</span> <span class="o">&gt;</span> <span class="sr">/dev/nu</span><span class="n">ll</span><span class="p">;</span> <span class="n">echo</span> <span class="vg">$?</span><span class="p">)</span>
</span><span class='line'>  <span class="n">done</span>
</span><span class='line'>  <span class="n">echo</span> <span class="s2">&quot;Setting port to $PORT&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">getport</span>
</span><span class='line'>
</span><span class='line'><span class="nb">test</span> <span class="o">-</span><span class="n">e</span> <span class="o">~</span><span class="sr">/.ssh || { echo &quot;Create an ssh dir&quot;; exit 1; }</span>
</span><span class='line'>
</span><span class='line'><span class="sr">VPNENV=`echo $(naclient status | awk &#39;NR==4&#39; | cut -d: -f2)`</span>
</span><span class='line'><span class="sr">VPNREMOTE=&quot;data_center&quot;</span>
</span><span class='line'><span class="sr">LOCALGIT=&quot;10.10.100.100&quot;</span>
</span><span class='line'><span class="sr">INTGIT=&quot;172.24.100.10&quot;</span>
</span><span class='line'><span class="sr">JUMPHOST=&quot;172.20.100.11&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">if [ &quot;$VPNENV&quot; == &quot;$VPNREMOTE&quot; ]</span>
</span><span class='line'><span class="sr">then</span>
</span><span class='line'><span class="sr"> echo &quot;Connected to $VPNENV&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="sr"> echo &quot;Connecting to local git:&quot;</span>
</span><span class='line'><span class="sr"> ssh -o &#39;ControlMaster auto&#39; -o &#39;ControlPath ~/</span><span class="o">.</span><span class="n">ssh</span><span class="o">/</span><span class="no">LOCALGIT</span><span class="o">.</span><span class="n">sock</span><span class="s1">&#39; -N -f root@$LOCALGIT </span>
</span><span class='line'><span class="s1"> echo &quot;Connecting to jumphost:&quot;</span>
</span><span class='line'><span class="s1"> ssh -o &#39;</span><span class="no">ControlMaster</span> <span class="n">auto</span><span class="s1">&#39; -o &#39;</span><span class="no">ControlPath</span> <span class="o">~</span><span class="sr">/.ssh/</span><span class="n">jump</span><span class="o">.</span><span class="n">sock</span><span class="s1">&#39; -N -f -L $PORT:$INTGIT:22 root@$JUMPHOST</span>
</span><span class='line'><span class="s1"> echo &quot;Connecting to git in integration:&quot;</span>
</span><span class='line'><span class="s1"> ssh -o &#39;</span><span class="no">ControlMaster</span> <span class="n">auto</span><span class="s1">&#39; -o &#39;</span><span class="no">ControlPath</span> <span class="o">~</span><span class="sr">/.ssh/in</span><span class="n">tgit</span><span class="o">.</span><span class="n">sock</span><span class="s1">&#39; -o &#39;</span><span class="no">UserKnownHostsFile</span> <span class="sr">/dev/nu</span><span class="n">ll</span><span class="s1">&#39; -N -f root@localhost -p $PORT</span>
</span><span class='line'>
</span><span class='line'><span class="s1"> # SSH LOCALGIT and run rake backup, scp latest backup to host </span>
</span><span class='line'><span class="s1"> echo &quot;Running gitlab:backup:create&quot;</span>
</span><span class='line'><span class="s1"> ssh -S ~/.ssh/LOCALGIT.sock root@$LOCALGIT gitlab-rake gitlab:backup:create</span>
</span><span class='line'><span class="s1"> echo &quot;Staging backup in /tmp&quot;</span>
</span><span class='line'><span class="s1"> ssh -S ~/.ssh/LOCALGIT.sock root@$LOCALGIT &quot;$(typeset -f); stagelatest&quot;</span>
</span><span class='line'><span class="s1"> echo &quot;Copying over from lab git to localhost&quot;</span>
</span><span class='line'><span class="s1"> scp -o &#39;</span><span class="no">ControlPath</span> <span class="o">~</span><span class="sr">/.ssh/</span><span class="no">LOCALGIT</span><span class="o">.</span><span class="n">sock</span><span class="s1">&#39; root@$LOCALGIT:/tmp/1111111111_gitlab_backup.tar /tmp/</span>
</span><span class='line'><span class="s1"> echo &quot;Copying lab git backup from localhost to integration git server&quot;</span>
</span><span class='line'><span class="s1"> scp -o &#39;</span><span class="no">ControlPath</span> <span class="o">~</span><span class="sr">/.ssh/in</span><span class="n">tgit</span><span class="o">.</span><span class="n">sock</span><span class="err">&#39;</span> <span class="o">-</span><span class="n">P</span> <span class="vg">$PORT</span> <span class="sr">/tmp/</span><span class="mi">1111111111</span><span class="n">_gitlab_backup</span><span class="o">.</span><span class="n">tar</span> <span class="n">root</span><span class="vi">@localhost</span><span class="ss">:/</span><span class="n">var</span><span class="o">/</span><span class="n">opt</span><span class="o">/</span><span class="n">gitlab</span><span class="o">/</span><span class="n">backups</span>
</span><span class='line'>  <span class="n">echo</span> <span class="s2">&quot;Would you like to run restore on the integration server now?&quot;</span>
</span><span class='line'>  <span class="n">read</span> <span class="n">restore</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[[</span> <span class="vg">$restore</span> <span class="o">=~</span> <span class="o">^</span><span class="n">y</span> <span class="o">]]</span>
</span><span class='line'>  <span class="k">then</span>
</span><span class='line'>      <span class="n">echo</span> <span class="s2">&quot;Running restore on integration git server&quot;</span>
</span><span class='line'>      <span class="n">ssh</span> <span class="o">-</span><span class="n">S</span> <span class="o">~</span><span class="sr">/.ssh/in</span><span class="n">tgit</span><span class="o">.</span><span class="n">sock</span> <span class="n">root</span><span class="vi">@localhost</span> <span class="o">-</span><span class="nb">p</span> <span class="vg">$PORT</span> <span class="no">BACKUP</span><span class="o">=</span><span class="mi">1111111111</span> <span class="n">gitlab</span><span class="o">-</span><span class="n">rake</span> <span class="ss">gitlab</span><span class="p">:</span><span class="ss">backup</span><span class="p">:</span><span class="n">restore</span> <span class="o">&lt;&lt;&lt;</span> <span class="n">yes</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">echo</span> <span class="s2">&quot;Not running restore&quot;</span>
</span><span class='line'>      <span class="n">echo</span> <span class="s2">&quot;Backup located at /var/opt/gitlab/backups/1111111111_gitlab_backup.tar&quot;</span>
</span><span class='line'>      <span class="n">echo</span> <span class="s2">&quot;-----&quot;</span>
</span><span class='line'>      <span class="n">echo</span> <span class="s2">&quot;To backup manually run:&quot;</span>
</span><span class='line'>      <span class="n">echo</span> <span class="s2">&quot;BACKUP=1111111111_gitlab_backup.tar gitlab-rake gitlab:backup:restore&quot;</span>
</span><span class='line'>  <span class="n">fi</span>
</span><span class='line'>  <span class="n">cleanup</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">echo</span> <span class="s2">&quot;VPN Enviro not correct, connected to: $VPNENV&quot;</span>
</span><span class='line'>  <span class="n">echo</span> <span class="s2">&quot;Check VPN connection to data_center, or start NA Client&quot;</span>
</span><span class='line'>  <span class="n">cleanup</span> <span class="mi">1</span>
</span><span class='line'><span class="n">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>The final script can be pulled down from <a href="https://github.com/malnick/scripts/blob/master/connect.sh">my github account</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Simple Nagios Docker Plugin]]></title>
    <link href="httpL://www.jeffmalnick.com/blog/2014/06/24/a-simple-nagios-docker-plugin/"/>
    <updated>2014-06-24T12:19:43-07:00</updated>
    <id>httpL://www.jeffmalnick.com/blog/2014/06/24/a-simple-nagios-docker-plugin</id>
    <content type="html"><![CDATA[<p>Docker is an amazing tool with a lot great functional command line interfaces. A typical docker deployment might have a webapp running inside a container. In order to observe the beahvior of this container you might want to setup a Nagios plugin to monitor log output.</p>

<p>To do this I am going to do the following:</p>

<ol>
<li>Deploy an Ubuntu Precise VM on 10.10.33.2 via Vagrant</li>
<li>Provsion the VM with Puppet using the Vagrant Puppet provisioner:

<ol>
<li>Installs docker using garethr-docker</li>
<li>Installs the training/webapp image</li>
<li>Runs the container using an exec</li>
<li>Installs nagios and my ruby plugin to monitor the docker service and the training/webapp image for the following:

<ol>
<li>Is the docker command available?</li>
<li>Is the webapp running?

<ul>
<li>Ensures webapp is running on <code>localhost:5000</code></li>
<li>Checks the log for 404 errors and sends warnings if so</li>
<li>Counts the errors for each URL with a 404 and outputs the count and URL which has the highest hit count</li>
<li>test the above by trying <code>10.10.33.2:5000/test</code> over and over again</li>
</ul>
</li>
</ol>
</li>
</ol>
</li>
</ol>


<h2>The Vagrantfile</h2>

<p>I start with a basic Vagrantfile to deploy an Ubuntu Precise VM:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="s2">&quot;2&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provider</span> <span class="s2">&quot;virtualbox&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">v</span><span class="o">|</span>
</span><span class='line'>  <span class="n">v</span><span class="o">.</span><span class="n">customize</span> <span class="o">[</span><span class="s2">&quot;modifyvm&quot;</span><span class="p">,</span> <span class="ss">:id</span><span class="p">,</span> <span class="s2">&quot;--memory&quot;</span><span class="p">,</span> <span class="mi">1024</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">define</span> <span class="ss">:nagios</span> <span class="k">do</span> <span class="o">|</span><span class="n">deploy</span><span class="o">|</span>
</span><span class='line'>  <span class="n">deploy</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;precise64&quot;</span>
</span><span class='line'>  <span class="n">deploy</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">hostname</span> <span class="o">=</span> <span class="s2">&quot;nagios.server.dev&quot;</span>
</span><span class='line'>  <span class="n">deploy</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box_url</span> <span class="o">=</span> <span class="s2">&quot;http://files.vagrantup.com/precise64.box&quot;</span>
</span><span class='line'>  <span class="n">deploy</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">synced_folder</span> <span class="s2">&quot;modules&quot;</span><span class="p">,</span> <span class="s2">&quot;/etc/puppet/modules&quot;</span>
</span><span class='line'>  <span class="n">deploy</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">synced_folder</span> <span class="s2">&quot;manifests&quot;</span><span class="p">,</span> <span class="s2">&quot;/etc/puppet/manifests&quot;</span>
</span><span class='line'>  <span class="n">deploy</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="ss">:private_network</span><span class="p">,</span> <span class="ss">ip</span><span class="p">:</span> <span class="s2">&quot;10.10.33.2&quot;</span> <span class="c1"># Define static IP once dev completes</span>
</span><span class='line'>  <span class="n">deploy</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="ss">:puppet</span><span class="p">,</span> <span class="ss">:module_path</span> <span class="o">=&gt;</span> <span class="s2">&quot;modules&quot;</span><span class="p">,</span> <span class="ss">:manifests_path</span> <span class="o">=&gt;</span> <span class="s2">&quot;manifests&quot;</span><span class="p">,</span> <span class="ss">:manifest_file</span> <span class="o">=&gt;</span> <span class="s2">&quot;deploy_nagios.pp&quot;</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Puppet Provisioner</h2>

<p>In order to provision the VM on boot I used the Puppet provisioner which ships with Vagrant. For testing purposes I like to sync my manifests and modules directory to the VM. Usually I run a bash script before provisioning with Puppet to install from the Puppet Labs apt or yum repos, however for this project that wasn&rsquo;t neccessary as the goal is to have a quickly bootable dev environment for my Nagios server and Docker container.</p>

<p>The <code>deploy_nagios.pp</code> manifest looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Deploy docker and an Ubuntu image to play with</span>
</span><span class='line'><span class="k">class</span> <span class="p">{</span><span class="s1">&#39;docker&#39;</span><span class="p">:}</span>
</span><span class='line'><span class="ss">docker</span><span class="p">:</span><span class="ss">:image</span> <span class="p">{</span> <span class="s1">&#39;training/webapp&#39;</span><span class="p">:</span>
</span><span class='line'>  <span class="nb">require</span> <span class="o">=&gt;</span> <span class="no">Class</span><span class="o">[</span><span class="s1">&#39;docker&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1"># Super hero hack to run the docker image... see readme for why.</span>
</span><span class='line'><span class="c1"># Also, in no way is this idempotent, if it&#39;s running it&#39;ll fail.</span>
</span><span class='line'><span class="nb">exec</span> <span class="p">{</span> <span class="s1">&#39;/usr/bin/docker run -d -p 5000:5000 training/webapp python app.py&#39;</span><span class="p">:</span>
</span><span class='line'>  <span class="nb">require</span> <span class="o">=&gt;</span> <span class="ss">Docker</span><span class="p">:</span><span class="ss">:Image</span><span class="o">[</span><span class="s1">&#39;training/webapp&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">#docker::run { &#39;webapp&#39;:</span>
</span><span class='line'><span class="c1">#  image   =&gt; &#39;ubuntu&#39;,</span>
</span><span class='line'><span class="c1">#  command =&gt; &#39;/bin/echo test&#39;,</span>
</span><span class='line'><span class="c1">#  require =&gt; Docker::Image[&#39;training/webapp&#39;],</span>
</span><span class='line'><span class="c1">#}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Update this thing</span>
</span><span class='line'><span class="nb">exec</span> <span class="p">{</span> <span class="s1">&#39;/usr/bin/apt-get update&#39;</span><span class="p">:}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Install nagios </span>
</span><span class='line'><span class="k">class</span> <span class="p">{</span> <span class="s1">&#39;nagios&#39;</span><span class="p">:</span>
</span><span class='line'>  <span class="nb">require</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="no">Exec</span><span class="o">[</span><span class="s1">&#39;/usr/bin/apt-get update&#39;</span><span class="o">]</span><span class="p">,</span><span class="no">Class</span><span class="o">[</span><span class="s1">&#39;docker&#39;</span><span class="o">]]</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Get my plugin on the system correctly</span>
</span><span class='line'><span class="ss">nagios</span><span class="p">:</span><span class="ss">:plugin</span> <span class="p">{</span> <span class="s1">&#39;docker_status&#39;</span><span class="p">:</span>
</span><span class='line'>   <span class="n">source</span> <span class="o">=&gt;</span> <span class="s1">&#39;nagios/nagios-plugins/docker_status.rb&#39;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># WARNING: TOTAL HACK PLEASE DON&#39;T JUDGE ME</span>
</span><span class='line'><span class="nb">exec</span> <span class="p">{</span> <span class="s1">&#39;/bin/echo &quot;command[docker_status]=/usr/lib/nagios/plugins/docker_status&quot; &gt;&gt; /etc/nagios/nrpe.cfg&#39;</span><span class="p">:</span>
</span><span class='line'>  <span class="nb">require</span> <span class="o">=&gt;</span> <span class="no">File</span><span class="o">[</span><span class="s1">&#39;/etc/nagios/nrpe.cfg&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>  <span class="n">notify</span> <span class="o">=&gt;</span> <span class="no">Service</span><span class="o">[</span><span class="s1">&#39;nrpe&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Ensure docker and nagios are in the same group</span>
</span><span class='line'><span class="nb">exec</span> <span class="p">{</span><span class="s1">&#39;/usr/sbin/usermod -a -G docker nagios&#39;</span><span class="p">:</span>
</span><span class='line'>  <span class="nb">require</span> <span class="o">=&gt;</span> <span class="no">Class</span><span class="o">[</span><span class="s1">&#39;nagios&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>  <span class="n">notify</span>  <span class="o">=&gt;</span> <span class="no">Service</span><span class="o">[</span><span class="s1">&#39;nrpe&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="ss">nagios</span><span class="p">:</span><span class="ss">:command</span> <span class="p">{</span> <span class="s1">&#39;docker_status&#39;</span><span class="p">:</span>
</span><span class='line'>  <span class="n">command_line</span> <span class="o">=&gt;</span> <span class="s1">&#39;$USER1$/check_nrpe -H $HOSTADDRESS$ -c docker_status&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Set the nagiosadmin password </span>
</span><span class='line'><span class="nb">exec</span> <span class="p">{</span> <span class="s1">&#39;/usr/bin/htpasswd -cb /etc/nagios3/htpasswd.users nagiosadmin nagiosadmin&#39;</span><span class="p">:</span>
</span><span class='line'>  <span class="nb">require</span> <span class="o">=&gt;</span> <span class="no">Class</span><span class="o">[</span><span class="s1">&#39;nagios&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># I wrote my plugin in Ruby so lets make sure the VM has it. </span>
</span><span class='line'><span class="n">package</span> <span class="p">{</span> <span class="s1">&#39;ruby1.9.1&#39;</span><span class="p">:</span>
</span><span class='line'>  <span class="k">ensure</span> <span class="o">=&gt;</span> <span class="n">present</span><span class="p">,</span>
</span><span class='line'>  <span class="nb">require</span> <span class="o">=&gt;</span> <span class="no">Class</span><span class="o">[</span><span class="s1">&#39;nagios&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yup, I had a couple of hero hacks in there to get around some issues with the <code>docker::run</code> define. That define should work, but  kept failing with a very odd &lsquo;&lt;&lt; is not a {}:hash&rsquo; error. I grep&#8217;ed through the module to try and find where this was coming from and I think it&rsquo;s a heredoc within a function for the define. I still need to look into it. I ran an exec after the image is downloaded to get around this problem.</p>

<p>I also hero hacked the update to the <code>nrpe.cfg</code> file as the Nagios module I used didn&rsquo;t make it clearly evident how or if it did this.</p>

<p>&hellip; In no way do any of these hacks make me an &ldquo;inpatient&rdquo; person.</p>

<h2>The Nagios Plugin</h2>

<p>Recall my plugin should monitor:</p>

<ol>
<li>Is the docker command available?</li>
<li>Is the webapp running?

<ul>
<li>Ensures webapp is running on <code>localhost:5000</code></li>
<li>Checks the log for 404 errors and sends warnings if so</li>
<li>Counts the errors for each URL with a 404 and outputs the count and URL which has the highest hit count</li>
<li>test the above by trying <code>10.10.33.2:5000/test</code> over and over again</li>
</ul>
</li>
</ol>


<h3>Let&rsquo;s break it down</h3>

<h4>Nagios Basics:</h4>

<p>First, let&rsquo;s define some basic outputs for the Nagios API. Since Nagios is only looking for specific exit codes from any given script we define those as methods here first.</p>

<pre><code>0 = OK
1 = Shit is potentially hitting the fan
2 = Shit is hitting the fan
3 = Unknown shit is happening
</code></pre>

<h4>The first part of my Plugin defines these:</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/ruby</span>
</span><span class='line'><span class="c1"># Checks the docker status command for number of running containers</span>
</span><span class='line'><span class="c1"># Ensures the docker container is running by checking that the socket exists</span>
</span><span class='line'><span class="c1"># </span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Define some helper methods for Nagios with appropriate exit codes</span>
</span><span class='line'><span class="k">def</span> <span class="nf">ok</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;OK - </span><span class="si">#{</span><span class="n">message</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="nb">exit</span> <span class="mi">0</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">critical</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Critical - </span><span class="si">#{</span><span class="n">message</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="nb">exit</span> <span class="mi">2</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">warning</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Warning - </span><span class="si">#{</span><span class="n">message</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="nb">exit</span> <span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">unknown</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Unknown - </span><span class="si">#{</span><span class="n">message</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="nb">exit</span> <span class="mi">3</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Check to ensure docker is installed</h4>

<p>Now let&rsquo;s check to ensure Docker is installed, we can use a simple <code>system()</code> method which returns exit codes only:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">docker_installed</span><span class="p">()</span>
</span><span class='line'>  <span class="k">if</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;which docker &gt; /dev/null&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">webapp_status</span><span class="p">()</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">critical</span><span class="p">(</span><span class="s2">&quot;Docker isn&#39;t installed&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yup, it&rsquo;s that easy, <code>which docker</code> will return &lsquo;0&rsquo; or &lsquo;false&rsquo; if it does not find the command and &lsquo;1&rsquo; or &lsquo;true&rsquo; if a path to the command is found. This isn&rsquo;t the most robust check ever, but for now it&rsquo;s enough to move on. Since all my other def&rsquo;s work on the <code>docker</code> face and it&rsquo;s sub commands I need to ensure this is present before doing anything else.</p>

<h4>Check the webapp status</h4>

<p>First, I want to make sure the webapp is running on the VM on a specific port. I&rsquo;m going to use a <code>netstat</code> command and <code>awk</code> to return the process running on port 5000:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">webapp_status</span><span class="p">()</span>
</span><span class='line'>  <span class="c1"># Ensure the webapp is running on localhost:5000</span>
</span><span class='line'>  <span class="n">webapp_run</span> <span class="o">=</span> <span class="sb">`netstat -anp | grep 5000 | awk &#39;{print $7}&#39; | cut -d/ -f2`</span>
</span><span class='line'>  <span class="n">should_be</span>   <span class="o">=</span> <span class="s2">&quot;docker&quot;</span>
</span><span class='line'>  <span class="n">webapp_run</span><span class="o">.</span><span class="n">chomp!</span><span class="o">.</span><span class="n">strip!</span>
</span></code></pre></td></tr></table></div></figure>


<p>This should return this this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@nagios:/home/vagrant# netstat -anp | grep 5000 | awk <span class="s1">&#39;{print $7}&#39;</span> | cut -d/ -f2
</span><span class='line'>docker
</span></code></pre></td></tr></table></div></figure>


<p>Then we pass this into some basic &lsquo;if&rsquo; logic:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="k">if</span> <span class="n">webapp_run</span> <span class="o">==</span> <span class="n">should_be</span>
</span><span class='line'>      <span class="c1"># Check to ensure there are no 404 errors in the log</span>
</span><span class='line'>      <span class="n">check_this</span> <span class="o">=</span> <span class="s2">&quot;docker logs $(docker ps -l | awk &#39;{print $1}&#39; | awk &#39;{if (NR == 2){print $0}}&#39;) 2&gt;&amp;1 | grep 404 | awk &#39;{print $7}&#39; | sort | uniq -c&quot;</span>
</span><span class='line'>      <span class="n">check</span> <span class="o">=</span> <span class="nb">system</span><span class="p">(</span><span class="n">check_this</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">check</span>
</span><span class='line'>          <span class="no">IO</span><span class="o">.</span><span class="n">popen</span><span class="p">(</span><span class="n">check_this</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">io</span><span class="o">|</span>
</span><span class='line'>              <span class="n">line</span>  <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">readlines</span>
</span><span class='line'>              <span class="n">errors</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>              <span class="n">line</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">this</span><span class="o">|</span>
</span><span class='line'>                  <span class="n">number</span> <span class="o">=</span> <span class="n">this</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>                  <span class="n">url</span> <span class="o">=</span> <span class="n">this</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>                  <span class="n">errors</span><span class="o">.</span><span class="n">store</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">number</span><span class="p">)</span>   
</span><span class='line'>              <span class="k">end</span>  
</span><span class='line'>              <span class="n">max_value</span> <span class="o">=</span> <span class="n">errors</span><span class="o">.</span><span class="n">values</span><span class="o">.</span><span class="n">max</span>
</span><span class='line'>              <span class="n">max_key</span> <span class="o">=</span> <span class="n">errors</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="o">|</span> <span class="n">v</span><span class="o">==</span><span class="n">max_value</span> <span class="p">}</span><span class="o">.</span><span class="n">keys</span>  
</span><span class='line'>              <span class="k">case</span> <span class="n">max_value</span><span class="o">.</span><span class="n">to_i</span> <span class="o">&gt;</span> <span class="mi">20</span>
</span><span class='line'>                  <span class="k">when</span> <span class="kp">false</span>
</span><span class='line'>                      <span class="n">warning</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">max_value</span><span class="si">}</span><span class="s2"> 404 Errors at localhost</span><span class="si">#{</span><span class="n">max_key</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>                  <span class="k">when</span> <span class="kp">true</span>
</span><span class='line'>                      <span class="n">critical</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">max_value</span><span class="si">}</span><span class="s2"> 404 Errors at localhost</span><span class="si">#{</span><span class="n">max_key</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>              <span class="k">end</span>
</span><span class='line'>          <span class="k">end</span>  
</span></code></pre></td></tr></table></div></figure>


<p>Lot&rsquo;s of things are happening there.</p>

<p>1st, if &lsquo;docker&rsquo; is the output of the webapp status command we drop into another loop. This loop runs a <code>check_this</code> command that is derived from the <code>docker log</code> face. That particular face feeds the output from a sys-log-like to the terminals stdin.</p>

<p>But first, <code>docker logs</code> needs to have the process hash of the container you want to query, so I run a <code>docker ps -l</code> and <code>awk</code> for the hash of the process I want.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@nagios:/home/vagrant# docker ps -l
</span><span class='line'>CONTAINER ID        IMAGE                    COMMAND             CREATED             STATUS              PORTS                    NAMES
</span><span class='line'>c968cced9f32        training/webapp:latest   python app.py       33 minutes ago      Up 33 minutes       0.0.0.0:5000-&gt;5000/tcp   berserk_pare
</span></code></pre></td></tr></table></div></figure>


<p>This would definitely break if you had many containers running.</p>

<p>So anyways, if we have that hash we can now pass it to <code>docker logs</code> like I did in the ruby script like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">root</span><span class="vi">@nagios</span><span class="ss">:/</span><span class="n">home</span><span class="o">/</span><span class="n">vagrant</span><span class="c1"># docker logs c968cced9f32</span>
</span><span class='line'> <span class="o">*</span> <span class="no">Running</span> <span class="n">on</span> <span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="p">:</span><span class="mi">5000</span><span class="o">/</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tight.</p>

<p>Now that I have access to the log from the webapp I can grep URL&rsquo;s which have 404 errors, add those to a hash as k,v&rsquo;s and then iterate over the hash for the key with the largest value.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">popen</span><span class="p">(</span><span class="n">check_this</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">io</span><span class="o">|</span>
</span><span class='line'>  <span class="n">line</span>  <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">readlines</span>
</span><span class='line'>  <span class="n">errors</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="n">line</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">this</span><span class="o">|</span>
</span><span class='line'>      <span class="n">number</span> <span class="o">=</span> <span class="n">this</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>      <span class="n">url</span> <span class="o">=</span> <span class="n">this</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>      <span class="n">errors</span><span class="o">.</span><span class="n">store</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">number</span><span class="p">)</span>   
</span><span class='line'>  <span class="k">end</span>  
</span><span class='line'>  <span class="n">max_value</span> <span class="o">=</span> <span class="n">errors</span><span class="o">.</span><span class="n">values</span><span class="o">.</span><span class="n">max</span>
</span><span class='line'>  <span class="n">max_key</span> <span class="o">=</span> <span class="n">errors</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="o">|</span> <span class="n">v</span><span class="o">==</span><span class="n">max_value</span> <span class="p">}</span><span class="o">.</span><span class="n">keys</span>  
</span></code></pre></td></tr></table></div></figure>


<p>Now I can use that key&rsquo;s value to hit my <code>warning</code> or <code>critical</code> methods.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">case</span> <span class="n">max_value</span><span class="o">.</span><span class="n">to_i</span> <span class="o">&gt;</span> <span class="mi">20</span>
</span><span class='line'><span class="k">when</span> <span class="kp">false</span>
</span><span class='line'>  <span class="n">warning</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">max_value</span><span class="si">}</span><span class="s2"> 404 Errors at localhost</span><span class="si">#{</span><span class="n">max_key</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">when</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">critical</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">max_value</span><span class="si">}</span><span class="s2"> 404 Errors at localhost</span><span class="si">#{</span><span class="n">max_key</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, the end to this giant loop of loops does&hellip;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>     <span class="k">else</span>
</span><span class='line'>          <span class="n">ok</span><span class="p">(</span><span class="s2">&quot;Docker &amp; Webapp are in good shape!&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">critical</span><span class="p">(</span><span class="s2">&quot;Webapp is not running on localhost:5000&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip; and finally start it</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">docker_installed</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>My entire script looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Full </span>
</span><span class='line'><span class="c1">#!/usr/bin/ruby</span>
</span><span class='line'><span class="c1"># Checks the docker status command for number of running containers</span>
</span><span class='line'><span class="c1"># Ensures the docker container is running by checking that the socket exists</span>
</span><span class='line'><span class="c1"># </span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Define some helper methods for Nagios with appropriate exit codes</span>
</span><span class='line'><span class="k">def</span> <span class="nf">ok</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;OK - </span><span class="si">#{</span><span class="n">message</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="nb">exit</span> <span class="mi">0</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">critical</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Critical - </span><span class="si">#{</span><span class="n">message</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="nb">exit</span> <span class="mi">2</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">warning</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Warning - </span><span class="si">#{</span><span class="n">message</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="nb">exit</span> <span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">unknown</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Unknown - </span><span class="si">#{</span><span class="n">message</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="nb">exit</span> <span class="mi">3</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Check to ensure docker is installed</span>
</span><span class='line'><span class="k">def</span> <span class="nf">docker_installed</span><span class="p">()</span>
</span><span class='line'>  <span class="k">if</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;which docker &gt; /dev/null&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">webapp_status</span><span class="p">()</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">critical</span><span class="p">(</span><span class="s2">&quot;Docker isn&#39;t installed&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">webapp_status</span><span class="p">()</span>
</span><span class='line'>  <span class="c1"># Ensure the webapp is running on localhost:5000</span>
</span><span class='line'>  <span class="n">webapp_run</span> <span class="o">=</span> <span class="sb">`netstat -anp | grep 5000 | awk &#39;{print $7}&#39; | cut -d/ -f2`</span>
</span><span class='line'>  <span class="n">should_be</span>   <span class="o">=</span> <span class="s2">&quot;docker&quot;</span>
</span><span class='line'>  <span class="n">webapp_run</span><span class="o">.</span><span class="n">chomp!</span><span class="o">.</span><span class="n">strip!</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">webapp_run</span> <span class="o">==</span> <span class="n">should_be</span>
</span><span class='line'>      <span class="c1"># Check to ensure there are no 404 errors in the log</span>
</span><span class='line'>      <span class="n">check_this</span> <span class="o">=</span> <span class="s2">&quot;docker logs $(docker ps -l | awk &#39;{print $1}&#39; | awk &#39;{if (NR == 2){print $0}}&#39;) 2&gt;&amp;1 | grep 404 | awk &#39;{print $7}&#39; | sort | uniq -c&quot;</span>
</span><span class='line'>      <span class="n">check</span> <span class="o">=</span> <span class="nb">system</span><span class="p">(</span><span class="n">check_this</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">check</span>
</span><span class='line'>          <span class="no">IO</span><span class="o">.</span><span class="n">popen</span><span class="p">(</span><span class="n">check_this</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">io</span><span class="o">|</span>
</span><span class='line'>              <span class="n">line</span>  <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">readlines</span>
</span><span class='line'>              <span class="n">errors</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>              <span class="n">line</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">this</span><span class="o">|</span>
</span><span class='line'>                  <span class="n">number</span> <span class="o">=</span> <span class="n">this</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>                  <span class="n">url</span> <span class="o">=</span> <span class="n">this</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>                  <span class="n">errors</span><span class="o">.</span><span class="n">store</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">number</span><span class="p">)</span>   
</span><span class='line'>              <span class="k">end</span>  
</span><span class='line'>              <span class="n">max_value</span> <span class="o">=</span> <span class="n">errors</span><span class="o">.</span><span class="n">values</span><span class="o">.</span><span class="n">max</span>
</span><span class='line'>              <span class="n">max_key</span> <span class="o">=</span> <span class="n">errors</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="o">|</span> <span class="n">v</span><span class="o">==</span><span class="n">max_value</span> <span class="p">}</span><span class="o">.</span><span class="n">keys</span>  
</span><span class='line'>              <span class="k">case</span> <span class="n">max_value</span><span class="o">.</span><span class="n">to_i</span> <span class="o">&gt;</span> <span class="mi">20</span>
</span><span class='line'>                  <span class="k">when</span> <span class="kp">false</span>
</span><span class='line'>                      <span class="n">warning</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">max_value</span><span class="si">}</span><span class="s2"> 404 Errors at localhost</span><span class="si">#{</span><span class="n">max_key</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>                  <span class="k">when</span> <span class="kp">true</span>
</span><span class='line'>                      <span class="n">critical</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">max_value</span><span class="si">}</span><span class="s2"> 404 Errors at localhost</span><span class="si">#{</span><span class="n">max_key</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>              <span class="k">end</span>
</span><span class='line'>          <span class="k">end</span>  
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="n">ok</span><span class="p">(</span><span class="s2">&quot;Docker &amp; Webapp are in good shape!&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">critical</span><span class="p">(</span><span class="s2">&quot;Webapp is not running on localhost:5000&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">docker_installed</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Continuous Integration with Puppet Code]]></title>
    <link href="httpL://www.jeffmalnick.com/blog/2014/06/03/continuous-integration-with-puppet-code/"/>
    <updated>2014-06-03T07:54:12-07:00</updated>
    <id>httpL://www.jeffmalnick.com/blog/2014/06/03/continuous-integration-with-puppet-code</id>
    <content type="html"><![CDATA[<iframe src="http://www.slideshare.net/slideshow/embed_code/35435020" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/malnick/continuous-integration-withpuppet" title="Continuous integration with_puppet" target="_blank">Continuous integration with_puppet</a> </strong> from <strong><a href="http://www.slideshare.net/malnick" target="_blank">malnick</a></strong> </div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Packer Templates &amp; VMWare]]></title>
    <link href="httpL://www.jeffmalnick.com/blog/2014/05/29/packer-templates-and-vmware/"/>
    <updated>2014-05-29T12:19:53-07:00</updated>
    <id>httpL://www.jeffmalnick.com/blog/2014/05/29/packer-templates-and-vmware</id>
    <content type="html"><![CDATA[<h2>tl;dr</h2>

<p>There&rsquo;s not a lot of docs on Packer and the logging can be tricky to find sometimes depending on the vm you&rsquo;re booting (which provider backs it). If you&rsquo;re using VMWare and you&rsquo;re booting centos the <code>guest_os_type</code> key needs to be set appropriatly.</p>

<p>Some people seem to think this can be $anything that sounds reasonable (I did!) and there is no documentation on what should actually go there (as of writing this, Google was sparce). So if you have a doubt on what the <code>guest_os_type</code> value should be the best bet is to <code>$ diff</code> it with an already existing <code>*.your_vm_type</code> (&lsquo;vmx&rsquo;, &lsquo;ovf&rsquo;, et cetera).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat centos65-puppetmaster.json | grep -i guest_os_type
</span><span class='line'>    <span class="s2">&quot;guest_os_type&quot;</span>: <span class="s2">&quot;centos-65&quot;</span>,
</span></code></pre></td></tr></table></div></figure>


<p>However, if I query an already built <code>*.vmx</code> this is incorrect:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat master2.vmx | grep -i guestos
</span><span class='line'>   <span class="nv">guestos</span> <span class="o">=</span> <span class="s2">&quot;redhat&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>For CentOS at least, your <code>guest_os_type</code> value should be set to <code>redhat</code>.</p>

<h2>Back Story</h2>

<p>This week I was working with a customer to automate the deployment of some VM&rsquo;s to vSphere. This deployment is replaceing some current scripts and manually configured templates. Actually, a lot of scripts and manually configured templates.</p>

<p>The long and the short of it, me and my team decided to implement Vagrant and Packer to push out pre-written Packer templates to vSphere via Vagrant&rsquo;s vSphere plugin using the VMWare provider.</p>

<p>After scripting the json for this node I ran <code>packer build centos65.json</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">==</span>&gt; vmware-iso: Downloading or copying <span class="nv">ISO</span>
</span><span class='line'><span class="o">==</span>&gt; vmware-iso: Downloading or copying ISO
</span><span class='line'>vmware-iso: Downloading or copying: http://mirrors.kernel.org/centos/6.5/isos/x86_64/CentOS-6.5
</span><span class='line'><span class="o">==</span>&gt; vmware-iso: Creating virtual machine <span class="nv">disk</span>
</span><span class='line'><span class="o">==</span>&gt; vmware-iso: Building and writing VMX <span class="nv">file</span>
</span><span class='line'><span class="o">==</span>&gt; vmware-iso: Starting HTTP server on port <span class="nv">8582</span>
</span><span class='line'><span class="o">==</span>&gt; vmware-iso: Starting virtual machine...
</span><span class='line'><span class="o">==</span>&gt; vmware-iso: Error starting VM: VMware error:
</span><span class='line'><span class="o">==</span>&gt; vmware-iso: Deleting output directory...
</span><span class='line'>Build <span class="s1">&#39;vmware-iso&#39;</span> errored: Error starting VM: VMware error:
</span><span class='line'><span class="o">==</span>&gt; Some builds didn<span class="err">&#39;</span>t <span class="nb">complete </span>successfully and had errors:
</span><span class='line'>--&gt; vmware-iso: Error starting VM: VMware error:
</span><span class='line'>
</span><span class='line'><span class="o">==</span>&gt; Builds finished but no artifacts were created.
</span></code></pre></td></tr></table></div></figure>


<p>The vm booted into fusion and opened but failed in <code>vmrun</code>. How did I know that was the issue?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>grep -r vmrun /var/log/*
</span><span class='line'>system.log:May 29 05:30:32 bohr vmrun<span class="o">[</span>13249<span class="o">]</span>: com.vmware.fusion.78704: Invalid argument
</span><span class='line'>... <span class="c"># lots of other crap </span>
</span></code></pre></td></tr></table></div></figure>


<p>BUT WHAT ARGUMENT???</p>

<p>After digging around I found that logging for this issue was sketchy at best. Syslog, <code>/var/tmp/vmware</code>, the <code>guest_os_type</code> key needs to have an appropriate value (i.e., arugment from syslog):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat centos65-puppetmaster.json | grep -i guest_os_type
</span><span class='line'>    <span class="s2">&quot;guest_os_type&quot;</span>: <span class="s2">&quot;centos-65&quot;</span>,
</span></code></pre></td></tr></table></div></figure>


<p>However, if I query an already built <code>*.vmx</code> this is incorrect:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat master2.vmx | grep -i guestos
</span><span class='line'>   <span class="nv">guestos</span> <span class="o">=</span> <span class="s2">&quot;redhat&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>After changing the k,v in the json template and running <code>packer build</code> the vmrun command ran successfully.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[r10k: Control Repos]]></title>
    <link href="httpL://www.jeffmalnick.com/blog/2014/05/16/r10k-control-repos/"/>
    <updated>2014-05-16T12:34:33-07:00</updated>
    <id>httpL://www.jeffmalnick.com/blog/2014/05/16/r10k-control-repos</id>
    <content type="html"><![CDATA[<p>This document explains the architecture and deployment of a control repository for syncing multiple puppet environments, their associated puppet code (modules) and their assocaited data (hiera). This document does not review how to deploy r10k, however that is discussed in relevant detail <a href="https://github.com/puppetlabs/prosvcs-malnick/blob/master/README.md#deploy-git-r10k-and-stuff">here</a>.</p>

<h2>What is a control repo?</h2>

<p>A control repository stores a Puppetfile and hiera data (hiera.yaml and hieradata/).</p>

<h3>What does it contain?</h3>

<pre><code>hieradata/
Puppetfile
</code></pre>

<p>It is also common to have a <code>hiera.yaml</code> in the control repo. However <a href="http://www.jeffmalnick.com/blog/2014/05/15/hiera-and-r10k/">for many reasons</a> I don&rsquo;t believe this is a good idea. It can lead to confusing issues with branching of the file that is only consulted once for it&rsquo;s <code>$datadir</code> path and is not used on a per environment basis &ndash; it&rsquo;s loaded once from <code>$confdir</code> during the <em>hiera()</em> call and is not consulted on a per environment basis (e.g. <code>$confdir/environments/$environments/hiera.yaml</code> <strong>is not used</strong> during the <em>hiera()</em> lookup, only <code>$confdir/hiera.yaml</code> is used).</p>

<h2>How does it work?</h2>

<p>The control repo is placed in a monolithic git repository.</p>

<p>The repository can have one or more topic branches that are used by r10k to sync to local Puppet environments.</p>

<h3>Configuration for Puppet code &amp; Hiera data sync via r10k</h3>

<p>Details on how to deploy a gitlab repo and assocaited topic branching for r10k sync are <a href="https://github.com/puppetlabs/prosvcs-malnick/blob/master/README.md#deploy-git-r10k-and-stuff">here</a>.</p>

<p>Place a Puppetfile in <code>$confdir/Puppetfile</code>.</p>

<p>Populate your Puppetfile with what ever crap you need.</p>

<p>In <code>$confdir</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git init
</span><span class='line'>git remote add origin git@whatever.com:your_name/control_repo.git
</span><span class='line'>git branch -m master production
</span><span class='line'>git add Puppetfile
</span><span class='line'>git add hiera.yaml <span class="c"># r10k really doesn&#39;t need this but we&#39;ll add it anyways. </span>
</span><span class='line'>git add hieradata/
</span><span class='line'>git push -u origin production:production <span class="c"># or whatever branch, maybe production?</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Configure hiera.yaml for dynamic environments</h3>

<p><strong>NOTE</strong>: the hiera.yaml is only loaded from <code>$confdir/hiera.yaml</code> on each puppet run, this means even though you&rsquo;ll have a hiera.yaml in <code>$confdir/environments/$environment/</code> those are not actually consulted, only the $confdir hiera.yaml is used &ndash; therefore, <strong><em>you can not have hierarchies per environment</em></strong>. Since the <code>$datadir</code> is environment aware that namespace is filled at run time, and consults the specific environment datadir <code>$confdir/environments/$environment/hieradata/</code>.</p>

<p>Your hiera.yaml needs to have a <code>datadir</code> configured for dynamic lookup so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">:backends</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">yaml</span>
</span><span class='line'><span class="l-Scalar-Plain">:hierarchy</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="s">&quot;%{clientcert}&quot;</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="s">&quot;%{environment}&quot;</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">global</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">:yaml</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">:datadir</span><span class="p-Indicator">:</span> <span class="s">&#39;/etc/puppetlabs/puppet/environments/%{::environment}/hieradata&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Branching your Puppetfile</h3>

<p>For example, assuming you already have a master or production branch:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vi Puppetfile
</span></code></pre></td></tr></table></div></figure>


<p>&hellip;add some git modules etc&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git checkout -b development
</span><span class='line'>git push origin development:development
</span><span class='line'>git commit -am Puppetfile
</span><span class='line'>r10k deploy environment -pv
</span></code></pre></td></tr></table></div></figure>


<p>Now you have a new topic branch &lsquo;development&rsquo; and a new Puppet environment in <code>$confdir/environments/development</code>.</p>

<h3>Branching your hiera data</h3>

<p>Our <code>development</code> branch needs it&rsquo;s own data too:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> <span class="nv">$confdir</span>/hieradata
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>modify K,V&rsquo;s in <code>whatever.yaml</code></li>
<li>modify other K,V&rsquo;s as needed for your development environment</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git branch <span class="c"># check your branch, make sure it&#39;s still development</span>
</span><span class='line'>git commit -am hieradata
</span><span class='line'>git push
</span><span class='line'>r10k deploy environment -pv
</span></code></pre></td></tr></table></div></figure>


<p>Check <code>$confdir/environments/development/hieradata</code></p>

<h2>Testing</h2>

<h3>Configuration files for r10k, hiera, puppet:</h3>

<h4>/etc/r10k.yaml</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@master hieradata<span class="o">]</span><span class="c"># cat /etc/r10k.yaml</span>
</span><span class='line'>:cachedir: /var/cache/r10k
</span><span class='line'>:sources:
</span><span class='line'>  puppet:
</span><span class='line'>    remote: <span class="s2">&quot;git@10.10.100.111:user/control_repo.git&quot;</span>
</span><span class='line'>    basedir: /etc/puppetlabs/puppet/environments
</span><span class='line'>    prefix: <span class="nb">false</span>
</span><span class='line'>:purgedirs:
</span><span class='line'>  - <span class="s2">&quot;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>/etc/puppetlabs/puppet/puppet.conf</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>root@master hieradata<span class="o">]</span> cat /etc/puppetlabs/puppet/puppet.conf
</span><span class='line'><span class="o">[</span>main<span class="o">]</span>
</span><span class='line'><span class="nv">certname</span> <span class="o">=</span> master.puppetlabs.vm
</span><span class='line'><span class="nv">dns_alt_names</span> <span class="o">=</span> master.puppetlabs.vm,puppet
</span><span class='line'><span class="nv">vardir</span> <span class="o">=</span> /var/opt/lib/pe-puppet
</span><span class='line'><span class="nv">logdir</span> <span class="o">=</span> /var/log/pe-puppet
</span><span class='line'><span class="nv">rundir</span> <span class="o">=</span> /var/run/pe-puppet
</span><span class='line'><span class="nv">modulepath</span> <span class="o">=</span> /etc/puppetlabs/puppet/environments/<span class="nv">$environment</span>/modules:/opt/puppet/share/puppet/modules
</span><span class='line'><span class="nv">server</span> <span class="o">=</span> master.puppetlabs.vm
</span><span class='line'><span class="nv">user</span>  <span class="o">=</span> pe-puppet
</span><span class='line'><span class="nv">group</span> <span class="o">=</span> pe-puppet
</span><span class='line'><span class="nv">archive_files</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'><span class="nv">archive_file_server</span> <span class="o">=</span> master.puppetlabs.vm
</span><span class='line'><span class="c"># cut [master] &amp; [agent] sections, $modulepath above is the important config key here.</span>
</span></code></pre></td></tr></table></div></figure>


<h4>/etc/puppetlabs/puppet/hiera.yaml</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>root@master puppet<span class="o">]</span> cat hiera.yaml
</span><span class='line'>---
</span><span class='line'>:backends:
</span><span class='line'>  - yaml
</span><span class='line'>:hierarchy:
</span><span class='line'>  - <span class="s2">&quot;%{clientcert}&quot;</span>
</span><span class='line'>  - <span class="s2">&quot;%{environment}&quot;</span>
</span><span class='line'>  - global
</span><span class='line'>:yaml:
</span><span class='line'>  :datadir: <span class="s1">&#39;/etc/puppetlabs/puppet/environmets/%{environment}/hieradata&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>/etc/puppetlabs/puppet/Puppetfile</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>root@master puppet<span class="o">]</span><span class="c"># cat Puppetfile</span>
</span><span class='line'><span class="c"># mod, &lt;module name&gt;, &lt;version or tag&gt;, &lt;source&gt;</span>
</span><span class='line'>forge <span class="s2">&quot;http://forge.puppetlabs.com&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Modules from the Puppet Forge</span>
</span><span class='line'>mod <span class="s2">&quot;puppetlabs/stdlib&quot;</span>
</span><span class='line'>mod <span class="s2">&quot;puppetlabs/apache&quot;</span>, <span class="s2">&quot;0.11.0&quot;</span>
</span><span class='line'>mod <span class="s2">&quot;puppetlabs/pe_gem&quot;</span>
</span><span class='line'>mod <span class="s2">&quot;puppetlabs/mysql&quot;</span>
</span><span class='line'>mod <span class="s2">&quot;puppetlabs/firewall&quot;</span>
</span><span class='line'>mod <span class="s2">&quot;puppetlabs/vcsrepo&quot;</span>
</span><span class='line'>mod <span class="s2">&quot;puppetlabs/git&quot;</span>
</span><span class='line'>mod <span class="s2">&quot;puppetlabs/inifile&quot;</span>
</span><span class='line'>mod <span class="s2">&quot;zack/r10k&quot;</span>
</span><span class='line'>mod <span class="s2">&quot;gentoo/portage&quot;</span>
</span><span class='line'>mod <span class="s2">&quot;thias/vsftpd&quot;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c"># Modules from Github using various references</span>
</span><span class='line'>mod <span class="s2">&quot;wordpress&quot;</span>,
</span><span class='line'>  :git <span class="o">=</span>&gt; <span class="s2">&quot;git://github.com/hunner/puppet-wordpress.git&quot;</span>,
</span><span class='line'>  :ref <span class="o">=</span>&gt; <span class="s1">&#39;0.4.0&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Testing the Puppet Master <code>master.puppetlabs.vm:$confdir/</code>:</h3>

<h4>Our topic branches:</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>root@master puppet<span class="o">]</span> git branch
</span><span class='line'>  development
</span><span class='line'>* production
</span><span class='line'>  staging
</span></code></pre></td></tr></table></div></figure>


<h4>For the given topic branch above, production, let&rsquo;s look at our hieradata in <code>$confdir/hieradata</code>:</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>root@master hieradata<span class="o">]</span> <span class="nb">pwd</span>
</span><span class='line'>/etc/puppetlabs/puppet/hieradata
</span><span class='line'><span class="o">[</span>root@master hieradata<span class="o">]</span> ls
</span><span class='line'>agent1.puppetlabs.vm.yaml  agent2.puppetlabs.vm.yaml  agent3.puppetlabs.vm.yaml  master.puppetlabs.vm.yaml
</span></code></pre></td></tr></table></div></figure>


<h4>and for each of these files we have the same K,V:</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>root@master hieradata<span class="o">]</span> cat master.puppetlabs.vm.yaml
</span><span class='line'>---
</span><span class='line'>message: <span class="s2">&quot;%{fqdn} is running in environment %{environment}&quot;</span>
</span><span class='line'><span class="o">[</span>root@master hieradata<span class="o">]</span> cat agent1.puppetlabs.vm.yaml
</span><span class='line'>---
</span><span class='line'>message: <span class="s2">&quot;%{fqdn} is running in environment %{environment}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Now let&rsquo;s switch over to our development branch and compare:</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>root@master puppet<span class="o">]</span> git checkout development
</span><span class='line'>Switched to branch <span class="s1">&#39;development&#39;</span>
</span><span class='line'>root@master hieradata<span class="o">]</span> <span class="nb">pwd</span>
</span><span class='line'>/etc/puppetlabs/puppet/hieradata
</span><span class='line'><span class="o">[</span>root@master hieradata<span class="o">]</span> ls
</span><span class='line'>agent1.puppetlabs.vm.yaml  agent2.puppetlabs.vm.yaml  agent3.puppetlabs.vm.yaml  master.puppetlabs.vm.yaml
</span><span class='line'><span class="o">[</span>root@master hieradata<span class="o">]</span> cat agent1.puppetlabs.vm.yaml
</span><span class='line'>---
</span><span class='line'>message: <span class="s2">&quot;%{fqdn} is running in environment %{environment}&quot;</span>
</span><span class='line'><span class="o">[</span>root@master hieradata<span class="o">]</span> cat master.puppetlabs.vm.yaml
</span><span class='line'>---
</span><span class='line'>message: <span class="s2">&quot;%{fqdn} is running in environment %{environment}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sync everything up with r10k so we can test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>root@master puppet<span class="o">]</span> r10k deploy environment -pv
</span><span class='line'><span class="o">[</span>R10K::Task::Deployment::DeployEnvironments - INFO<span class="o">]</span> Loading environments from all sources
</span><span class='line'><span class="o">[</span>R10K::Task::Environment::Deploy - NOTICE<span class="o">]</span> Deploying environment staging
</span><span class='line'><span class="o">[</span>R10K::Task::Puppetfile::Sync - INFO<span class="o">]</span> Loading modules from Puppetfile into queue
</span><span class='line'><span class="o">[</span>R10K::Task::Environment::Deploy - NOTICE<span class="o">]</span> Deploying environment production
</span><span class='line'><span class="o">[</span>R10K::Task::Puppetfile::Sync - INFO<span class="o">]</span> Loading modules from Puppetfile into queue
</span><span class='line'><span class="o">[</span>R10K::Task::Module::Sync - INFO<span class="o">]</span> Deploying wordpress into /etc/puppetlabs/puppet/environments/production/modules
</span><span class='line'><span class="o">[</span>R10K::Task::Module::Sync - INFO<span class="o">]</span> Deploying vsftpd into /etc/puppetlabs/puppet/environments/production/modules
</span><span class='line'><span class="o">[</span>R10K::Task::Module::Sync - INFO<span class="o">]</span> Deploying portage into /etc/puppetlabs/puppet/environments/production/modules
</span><span class='line'><span class="o">[</span>R10K::Task::Module::Sync - INFO<span class="o">]</span> Deploying r10k into /etc/puppetlabs/puppet/environments/production/modules
</span><span class='line'><span class="o">[</span>R10K::Task::Module::Sync - INFO<span class="o">]</span> Deploying inifile into /etc/puppetlabs/puppet/environments/production/modules
</span><span class='line'><span class="o">[</span>R10K::Task::Module::Sync - INFO<span class="o">]</span> Deploying git into /etc/puppetlabs/puppet/environments/production/modules
</span><span class='line'><span class="o">[</span>R10K::Task::Module::Sync - INFO<span class="o">]</span> Deploying vcsrepo into /etc/puppetlabs/puppet/environments/production/modules
</span><span class='line'><span class="o">[</span>R10K::Task::Module::Sync - INFO<span class="o">]</span> Deploying firewall into /etc/puppetlabs/puppet/environments/production/modules
</span><span class='line'><span class="o">[</span>R10K::Task::Module::Sync - INFO<span class="o">]</span> Deploying mysql into /etc/puppetlabs/puppet/environments/production/modules
</span><span class='line'><span class="o">[</span>R10K::Task::Module::Sync - INFO<span class="o">]</span> Deploying pe_gem into /etc/puppetlabs/puppet/environments/production/modules
</span><span class='line'><span class="o">[</span>R10K::Task::Module::Sync - INFO<span class="o">]</span> Deploying apache into /etc/puppetlabs/puppet/environments/production/modules
</span><span class='line'><span class="o">[</span>R10K::Task::Module::Sync - INFO<span class="o">]</span> Deploying stdlib into /etc/puppetlabs/puppet/environments/production/modules
</span><span class='line'><span class="o">[</span>R10K::Task::Environment::Deploy - NOTICE<span class="o">]</span> Deploying environment master
</span><span class='line'><span class="o">[</span>R10K::Task::Puppetfile::Sync - INFO<span class="o">]</span> Loading modules from Puppetfile into queue
</span><span class='line'><span class="o">[</span>R10K::Task::Environment::Deploy - NOTICE<span class="o">]</span> Deploying environment development
</span><span class='line'><span class="o">[</span>R10K::Task::Puppetfile::Sync - INFO<span class="o">]</span> Loading modules from Puppetfile into queue
</span><span class='line'><span class="o">[</span>R10K::Task::Deployment::PurgeEnvironments - INFO<span class="o">]</span> Purging stale environments from /etc/puppetlabs/puppet/environments
</span></code></pre></td></tr></table></div></figure>


<p>Since there is a <code>%{certname}.yaml</code> for the master we can do a quick check on the command line that we&rsquo;re accessing the correct data:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>root@master puppet<span class="o">]</span> git checkout production
</span><span class='line'>Already on <span class="s1">&#39;production&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span>root@master puppet<span class="o">]</span> puppet apply -e <span class="s2">&quot;notice(hiera(message))&quot;</span>
</span><span class='line'>Notice: Scope<span class="o">(</span>Class<span class="o">[</span>main<span class="o">])</span>: master.puppetlabs.vm is running in environment production
</span><span class='line'>Notice: Compiled catalog <span class="k">for </span>master.puppetlabs.vm in environment production in 0.06 seconds
</span><span class='line'>Notice: Finished catalog run in 0.24 seconds
</span><span class='line'><span class="o">[</span>root@master puppet<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>$fqdn</code> and <code>$environment</code> values were correctly filled in. <strong>Note</strong> that this is a poor test since my data files are essentially all the same, <code>$environment</code> will always match it&rsquo;s environment and <code>$fqdn</code> will always match it&rsquo;s fqdn &ndash;  we could be grabbing this value from anywhere. So Let&rsquo;s try with hard coded values:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>root@master hieradata<span class="o">]</span> <span class="nb">pwd</span>
</span><span class='line'>/etc/puppetlabs/puppet/hieradata
</span><span class='line'><span class="o">[</span>root@master hieradata<span class="o">]</span> git branch
</span><span class='line'>  development
</span><span class='line'>* production
</span><span class='line'>  staging
</span><span class='line'><span class="o">[</span>root@master hieradata<span class="o">]</span> cat master.puppetlabs.vm.yaml
</span><span class='line'>---
</span><span class='line'>message: <span class="s2">&quot;I&#39;m hard coding this value: environment production, master.puppetlabs.vm.yaml&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now push your new data for production branch up to gitlab</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>root@master puppet<span class="o">]</span><span class="c"># git add hieradata/</span>
</span><span class='line'><span class="o">[</span>root@master puppet<span class="o">]</span><span class="c"># git commit -m &quot;hieradata hard coded&quot;</span>
</span><span class='line'><span class="o">[</span>production 3a58e49<span class="o">]</span> hieradata hard coded
</span><span class='line'> 1 files changed, 1 insertions<span class="o">(</span>+<span class="o">)</span>, 1 deletions<span class="o">(</span>-<span class="o">)</span>
</span><span class='line'> <span class="o">[</span>root@master puppet<span class="o">]</span><span class="c"># git push</span>
</span><span class='line'> Counting objects: 7, <span class="k">done</span>.
</span><span class='line'> Delta compression using up to 4 threads.
</span><span class='line'> Compressing objects: 100% <span class="o">(</span>4/4<span class="o">)</span>, <span class="k">done</span>.
</span><span class='line'> Writing objects: 100% <span class="o">(</span>4/4<span class="o">)</span>, 399 bytes, <span class="k">done</span>.
</span><span class='line'> Total 4 <span class="o">(</span>delta 2<span class="o">)</span>, reused 0 <span class="o">(</span>delta 0<span class="o">)</span>
</span><span class='line'> To git@10.10.100.111:user/control_repo.git
</span><span class='line'>    1b240c6..3a58e49  production -&gt; production
</span></code></pre></td></tr></table></div></figure>


<p>and sync r10k</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>root@master puppet<span class="o">]</span><span class="c"># r10k deploy environment -pv</span>
</span><span class='line'><span class="o">[</span>R10K::Task::Deployment::DeployEnvironments - INFO<span class="o">]</span> Loading environments from all sources
</span><span class='line'><span class="o">[</span>R10K::Task::Environment::Deploy - NOTICE<span class="o">]</span> Deploying environment staging
</span><span class='line'><span class="o">[</span>R10K::Task::Puppetfile::Sync - INFO<span class="o">]</span> Loading modules from Puppetfile into queue
</span><span class='line'><span class="o">[</span>R10K::Task::Environment::Deploy - NOTICE<span class="o">]</span> Deploying environment production
</span><span class='line'><span class="o">[</span>R10K::Task::Puppetfile::Sync - INFO<span class="o">]</span> Loading modules from Puppetfile into queue
</span><span class='line'><span class="c"># ommitting other output ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>and test for the correct hard coded K,V</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>root@master puppet<span class="o">]</span><span class="c"># puppet apply -e &quot;notice(hiera(message))&quot;</span>
</span><span class='line'>Notice: Scope<span class="o">(</span>Class<span class="o">[</span>main<span class="o">])</span>: I<span class="err">&#39;</span>m hard coding this value: environment production, master.puppetlabs.vm.yaml
</span><span class='line'>Notice: Compiled catalog <span class="k">for </span>master.puppetlabs.vm in environment production in 0.05 seconds
</span><span class='line'>Notice: Finished catalog run in 0.26 seconds
</span></code></pre></td></tr></table></div></figure>


<p>YAY!</p>

<h4>And again on the development branch</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>root@master hieradata<span class="o">]</span> <span class="nb">pwd</span>
</span><span class='line'>/etc/puppetlabs/puppet/hieradata
</span><span class='line'><span class="o">[</span>root@master hieradata<span class="o">]</span> git branch
</span><span class='line'>* development
</span><span class='line'>  production
</span><span class='line'>  staging
</span><span class='line'><span class="o">[</span>root@master puppet<span class="o">]</span> cat hieradata/master.puppetlabs.vm.yaml
</span><span class='line'>---
</span><span class='line'>message: <span class="s2">&quot;I&#39;m hard coding this value: environment development, master.puppetlabs.vm.yaml&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Push our new hieradata for <code>development</code> to gitlab:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>root@master puppet<span class="o">]</span> git add hieradata/
</span><span class='line'><span class="o">[</span>root@master puppet<span class="o">]</span> git commit -m <span class="s2">&quot;hieradata hard coded&quot;</span>
</span><span class='line'><span class="o">[</span>development 2873db5<span class="o">]</span> hieradata hard coded
</span><span class='line'> 1 files changed, 1 insertions<span class="o">(</span>+<span class="o">)</span>, 1 deletions<span class="o">(</span>-<span class="o">)</span>
</span><span class='line'><span class="o">[</span>root@master puppet<span class="o">]</span> git push
</span><span class='line'>Counting objects: 7, <span class="k">done</span>.
</span><span class='line'>Delta compression using up to 4 threads.
</span><span class='line'>Compressing objects: 100% <span class="o">(</span>4/4<span class="o">)</span>, <span class="k">done</span>.
</span><span class='line'>Writing objects: 100% <span class="o">(</span>4/4<span class="o">)</span>, 398 bytes, <span class="k">done</span>.
</span><span class='line'>Total 4 <span class="o">(</span>delta 2<span class="o">)</span>, reused 0 <span class="o">(</span>delta 0<span class="o">)</span>
</span><span class='line'>To git@10.10.100.111:user/control_repo.git
</span><span class='line'>   08e249b..2873db5  development -&gt; development
</span></code></pre></td></tr></table></div></figure>


<p>andthen sync with r10k</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>root@master puppet<span class="o">]</span><span class="c"># r10k deploy environment -pv</span>
</span><span class='line'><span class="o">[</span>R10K::Task::Deployment::DeployEnvironments - INFO<span class="o">]</span> Loading environments from all sources
</span><span class='line'><span class="o">[</span>R10K::Task::Environment::Deploy - NOTICE<span class="o">]</span> Deploying environment staging
</span><span class='line'><span class="o">[</span>R10K::Task::Puppetfile::Sync - INFO<span class="o">]</span> Loading modules from Puppetfile into queue
</span><span class='line'><span class="o">[</span>R10K::Task::Environment::Deploy - NOTICE<span class="o">]</span> Deploying environment production
</span><span class='line'><span class="o">[</span>R10K::Task::Puppetfile::Sync - INFO<span class="o">]</span> Loading modules from Puppetfile into queue
</span><span class='line'><span class="c"># ommitted the other output...</span>
</span></code></pre></td></tr></table></div></figure>


<p>and test with the <code>--environment development</code> switch</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>root@master puppet<span class="o">]</span><span class="c"># puppet apply -e &quot;notice(hiera(message))&quot; --environment development</span>
</span><span class='line'>Notice: Scope<span class="o">(</span>Class<span class="o">[</span>main<span class="o">])</span>: I<span class="err">&#39;</span>m hard coding this value: environment development, master.puppetlabs.vm.yaml
</span><span class='line'>Notice: Compiled catalog <span class="k">for </span>master.puppetlabs.vm in environment development in 0.05 seconds
</span><span class='line'>Notice: Finished catalog run in 0.25 seconds
</span></code></pre></td></tr></table></div></figure>


<p>`</p>

<p>We can also do a quick one time environment run with the <code>--environment</code> flag:</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I don't place a hiera.yaml in my CR]]></title>
    <link href="httpL://www.jeffmalnick.com/blog/2014/05/15/hiera-and-r10k/"/>
    <updated>2014-05-15T16:12:36-07:00</updated>
    <id>httpL://www.jeffmalnick.com/blog/2014/05/15/hiera-and-r10k</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s a really good reason. First off, unless your hiera.yaml is super complicated, then it probably doesn&rsquo;t need to be in version control. However, for a lot of deployments you need it in VC, but not in your control repo (i.e., the one that r10k will access for Puppetfile, hieradata and build our corrosponding enviros for on your master).</p>

<p>No, place that hiera.yaml in it&rsquo;s own VC repo.</p>

<p>I had a control repo with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Puppetfile
</span><span class='line'>hieradata/
</span><span class='line'>hiera.yaml</span></code></pre></td></tr></table></div></figure>


<p>and I kept running in to this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@master hieradata]# puppet apply -e "notice(hiera(message))"
</span><span class='line'>Error: Could not find data item message in any Hiera data file and no default supplied at line 1 on node master.puppetlabs.vm</span></code></pre></td></tr></table></div></figure>


<p>This was a very simple test to see if my <code>production</code> environment was grabbing the correct data via a message K,V in <code>$confdir/environments/production/hieradata/master.puppetlabs.vm.yaml</code> .</p>

<p>Check out the &mdash;debug</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Debug: hiera(): Hiera YAML backend starting
</span><span class='line'>Debug: hiera(): Looking up message in YAML backend
</span><span class='line'>Debug: hiera(): Looking for data source master.puppetlabs.vm
</span><span class='line'>Debug: hiera(): Cannot find datafile /etc/puppetlabs/puppet/environmets/production/hieradata/master.puppetlabs.vm.yaml, skipping
</span><span class='line'>Debug: hiera(): Looking for data source production
</span><span class='line'>Debug: hiera(): Cannot find datafile /etc/puppetlabs/puppet/environmets/production/hieradata/production.yaml, skipping
</span><span class='line'>Debug: hiera(): Looking for data source global
</span><span class='line'>Debug: hiera(): Cannot find datafile /etc/puppetlabs/puppet/environmets/production/hieradata/global.yaml, skipping</span></code></pre></td></tr></table></div></figure>


<p>So I copied the <code>datafile</code> path and redirected it to a diff along with a &#8220;`$(pwd) while in the /etc/puppetlabs/puppet/environments/production/hieradata directory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@master hieradata]# diff &lt;(echo "/etc/puppetlabs/puppet/environmets/production/hieradata/") &lt;(echo "$(pwd)")
</span><span class='line'>1c1
</span><span class='line'>&lt; /etc/puppetlabs/puppet/environmets/production/hieradata/
</span><span class='line'>---
</span><span class='line'>&gt; /etc/puppetlabs/puppet/environments/production/hieradata</span></code></pre></td></tr></table></div></figure>


<p>So the <code>$datadir</code> path in hiera.yaml</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@master puppet]# cat hiera.yaml | grep datadir
</span><span class='line'>  :datadir: '/etc/puppetlabs/puppet/environmets/%{environment}/hieradata'</span></code></pre></td></tr></table></div></figure>


<p>is indeed missing that f-ing &lsquo;n&rsquo;. Why? Because this was the second time this happened to me today.</p>

<p>Really? The second time? Really. The second fucking time.</p>

<p>I previously committed hiera.yaml along with hieradata/ and my Puppetfile to branch production. I tested it and came across this problem. Did the same test to figure out the correct path and updated hiera.yaml.</p>

<p>However, hiera.yaml was also in my development and staging branches. I didn&rsquo;t update those. So here I was again doing tests on development data for Puppet and <strong>boom</strong> my shit&rsquo;s broken again.</p>

<p>Since hiera.yaml is only used singularly on a puppet run, i.e., it&rsquo;s not consulted on a per environment basis, you only need one copy of it, and that&rsquo;s the one in your puppet $confdir. Having it scattered to the winds with r10k in the control repo does not give you any extra functionality (yet, someday we might make it enviro aware, but currently is not the case).</p>

<p>So if you&rsquo;re going to run your hiera.yaml into a VCS then do it in it&rsquo;s own monolithic repo. You can symlink it into the $confdir for Puppet.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Continous Integration Hooks with r10k &amp; Puppet]]></title>
    <link href="httpL://www.jeffmalnick.com/blog/2014/05/04/continous-integration-hooks-with-r10k-and-puppet/"/>
    <updated>2014-05-04T07:47:05-07:00</updated>
    <id>httpL://www.jeffmalnick.com/blog/2014/05/04/continous-integration-hooks-with-r10k-and-puppet</id>
    <content type="html"><![CDATA[<p>A week ago I was modifiying a webhook to run r10k on push to a git repository. The goal here was to sync up r10k everytime a push was made to the repo. However, in doing so I found that the <a href="https://github.com/acidprime/r10k/blob/master/templates/usr/local/bin/webhook.erb">current</a> hook didn&rsquo;t take advantage of deploying a specific puppet environmnet, and instead runs a full r10k sync across all topic branchs and thus all puppet environments.</p>

<p>I figured the first place to start was modifying the <a href="https://github.com/acidprime/r10k/blob/master/templates/usr/local/bin/webhook.erb#L35">&lsquo;post&rsquo;</a> method:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">post</span> <span class="s1">&#39;/payload&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="c1">#protected!</span>
</span><span class='line'>      <span class="n">deploy</span><span class="p">()</span>
</span><span class='line'>    <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p> to parse the json sent by git (in this case I was integrating with gitlab) for the <a href="http://demo.gitlab.com/help/web_hooks">ref branch</a>. So the &lsquo;post&rsquo; hook now looks like <a href="https://github.com/malnick/r10k/blob/master/templates/usr/local/bin/webhook.erb#L52">this</a>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">post</span> <span class="s1">&#39;/payload&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="c1">#protected!</span>
</span><span class='line'>    <span class="n">request</span><span class="o">.</span><span class="n">body</span><span class="o">.</span><span class="n">rewind</span>  <span class="c1"># in case someone already read it</span>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span> <span class="n">request</span><span class="o">.</span><span class="n">body</span><span class="o">.</span><span class="n">read</span>
</span><span class='line'>    <span class="n">branch</span> <span class="o">=</span> <span class="n">data</span><span class="o">[</span><span class="s1">&#39;ref&#39;</span><span class="o">].</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;/&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>    <span class="s2">&quot;ref branch: </span><span class="si">#{</span><span class="n">branch</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="c1">#deploy(refs)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>So the #branch effectively is our puppet environment that we want to pass to the r10k mcollective agent so we can deploy a specific puppet enviro and not sync across all topic branches/enviros. This will make it lightweight.</p>

<p>However, I ran into a blocker in the mcollective r10k agent itself. I want to pass this argument to it so I can sync all r10k nodes at once from this hook based on the ref branch the current r10k <a href="https://github.com/acidprime/r10k/blob/master/files/agent/r10k.rb#L28">agent</a> does not accept any arugments and only syncs across all topic branches using the &lsquo;syncronize&rsquo; method.</p>

<p>In order to pass this ref branch in and leverage &lsquo;r10k deploy environmnet #{topic_branch}&rsquo; as I&rsquo;m attempting here the agent will need to be modified to parse the argument.</p>

<p><a href="https://github.com/acidprime/r10k/blob/master/files/agent/r10k.rb#L28">Zach&rsquo;s current r10k agent</a> is pretty good, so we&rsquo;ll stick to modifying that (at this point I handed over the agent writing to a colleague Andrew Brader since I was sent to a training site and he had a week/time to modifying the mco agent):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>     <span class="k">def</span> <span class="nf">run_cmd</span><span class="p">(</span><span class="n">action</span><span class="p">,</span><span class="n">path</span><span class="o">=</span><span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>        <span class="n">output</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>        <span class="n">git</span>  <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;/usr/bin/env&#39;</span><span class="p">,</span> <span class="s1">&#39;git&#39;</span><span class="o">]</span>
</span><span class='line'>        <span class="n">r10k</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;/usr/bin/env&#39;</span><span class="p">,</span> <span class="s1">&#39;r10k&#39;</span><span class="o">]</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">action</span>
</span><span class='line'>        <span class="k">when</span> <span class="s1">&#39;push&#39;</span><span class="p">,</span><span class="s1">&#39;pull&#39;</span><span class="p">,</span><span class="s1">&#39;status&#39;</span>
</span><span class='line'>          <span class="n">cmd</span> <span class="o">=</span> <span class="n">git</span>
</span><span class='line'>          <span class="n">cmd</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;push&#39;</span>   <span class="k">if</span> <span class="n">action</span> <span class="o">==</span> <span class="s1">&#39;push&#39;</span>
</span><span class='line'>          <span class="n">cmd</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;pull&#39;</span>   <span class="k">if</span> <span class="n">action</span> <span class="o">==</span> <span class="s1">&#39;pull&#39;</span>
</span><span class='line'>          <span class="n">cmd</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;status&#39;</span> <span class="k">if</span> <span class="n">action</span> <span class="o">==</span> <span class="s1">&#39;status&#39;</span>
</span><span class='line'>          <span class="n">reply</span><span class="o">[</span><span class="ss">:status</span><span class="o">]</span> <span class="o">=</span> <span class="n">run</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="ss">:stderr</span> <span class="o">=&gt;</span> <span class="ss">:error</span><span class="p">,</span> <span class="ss">:stdout</span> <span class="o">=&gt;</span> <span class="ss">:output</span><span class="p">,</span> <span class="ss">:chomp</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:cwd</span> <span class="o">=&gt;</span> <span class="n">path</span> <span class="p">)</span>
</span><span class='line'>        <span class="k">when</span> <span class="s1">&#39;cache&#39;</span><span class="p">,</span><span class="s1">&#39;environment&#39;</span><span class="p">,</span><span class="s1">&#39;module&#39;</span><span class="p">,</span><span class="s1">&#39;synchronize&#39;</span><span class="p">,</span><span class="s1">&#39;sync&#39;</span><span class="p">,</span> <span class="s1">&#39;deploy_all&#39;</span>
</span><span class='line'>          <span class="n">cmd</span> <span class="o">=</span> <span class="n">r10k</span>
</span><span class='line'>          <span class="n">cmd</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;cache&#39;</span>       <span class="k">if</span> <span class="n">action</span> <span class="o">==</span> <span class="s1">&#39;cache&#39;</span>
</span><span class='line'>          <span class="n">cmd</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;synchronize&#39;</span> <span class="k">if</span> <span class="n">action</span> <span class="o">==</span> <span class="s1">&#39;synchronize&#39;</span> <span class="ow">or</span> <span class="n">action</span> <span class="o">==</span> <span class="s1">&#39;sync&#39;</span>
</span><span class='line'>          <span class="n">cmd</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;environment&#39;</span> <span class="k">if</span> <span class="n">action</span> <span class="o">==</span> <span class="s1">&#39;environment&#39;</span>
</span><span class='line'>          <span class="n">cmd</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;module&#39;</span>      <span class="k">if</span> <span class="n">action</span> <span class="o">==</span> <span class="s1">&#39;module&#39;</span>
</span><span class='line'>          <span class="n">cmd</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;deploy&#39;</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;environment&#39;</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;-p&#39;</span> <span class="k">if</span> <span class="n">action</span> <span class="o">==</span> <span class="s1">&#39;deploy_all&#39;</span>
</span><span class='line'>          <span class="n">reply</span><span class="o">[</span><span class="ss">:status</span><span class="o">]</span> <span class="o">=</span> <span class="n">run</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="ss">:stderr</span> <span class="o">=&gt;</span> <span class="ss">:error</span><span class="p">,</span> <span class="ss">:stdout</span> <span class="o">=&gt;</span> <span class="ss">:output</span><span class="p">,</span> <span class="ss">:chomp</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In order to parse the topic branch from the hook we need to add a method, which Andrew did <a href="https://github.com/abrader/r10k/blob/master/files/agent/r10k.rb#L59">here</a>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>      <span class="k">def</span> <span class="nf">deploy_only_cmd</span><span class="p">(</span><span class="n">r10k_env</span><span class="o">=</span><span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>        <span class="n">output</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>        <span class="n">r10k</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;/usr/bin/env&#39;</span><span class="p">,</span> <span class="s1">&#39;r10k&#39;</span><span class="o">]</span>
</span><span class='line'>        <span class="n">cmd</span> <span class="o">=</span> <span class="n">r10k</span>
</span><span class='line'>        <span class="n">cmd</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;deploy&#39;</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;environment&#39;</span> <span class="o">&lt;&lt;</span> <span class="n">r10k_env</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;-p&#39;</span>
</span><span class='line'>        <span class="n">reply</span><span class="o">[</span><span class="ss">:status</span><span class="o">]</span> <span class="o">=</span> <span class="n">run</span><span class="p">(</span><span class="n">deploy_only_cmd</span><span class="p">,</span> <span class="ss">:stderr</span> <span class="o">=&gt;</span> <span class="ss">:error</span><span class="p">,</span> <span class="ss">:stdout</span> <span class="o">=&gt;</span> <span class="ss">:output</span><span class="p">,</span> <span class="ss">:chomp</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Testing the new hook &amp; agent</h3>

<p>&hellip; to be updated shortly&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Puppet Types: Understanding Parameters and Properties]]></title>
    <link href="httpL://www.jeffmalnick.com/blog/2014/04/19/puppet-types-understanding-parameters-and-properties/"/>
    <updated>2014-04-19T08:30:28-07:00</updated>
    <id>httpL://www.jeffmalnick.com/blog/2014/04/19/puppet-types-understanding-parameters-and-properties</id>
    <content type="html"><![CDATA[<p>When starting out with Types and Providers for Puppet it&rsquo;s common to misunderstand when something is a <em>Parameter</em> and when something is a <em>Property</em>.</p>

<h3><strong>Properties</strong></h3>

<p>Properties are anything that will <strong>modify</strong> a resource. In other words, attributes of a type that will change how that resource type exists on your system. A property is a charactaristic of a resource. A property does not change what a resource is, which is where the confusion usually begins.</p>

<p>For example, let&rsquo;s take the file resource (anyone who has had the opportunity of taking Extending Puppet for Developers might find this redundant).</p>

<pre><code>file {'/tmp/test':
    ensure   =&gt; file,
    path     =&gt; '/tmp/test', # $namevar
    owner    =&gt; 'root',
    group    =&gt; 'root',
    checksum =&gt; 'md5',
    content  =&gt; 'foo',
    }
</code></pre>

<p>Any ideas which attributes are parameters and which are properties? Let&rsquo;s start with</p>

<pre><code>ensure =&gt; file,
</code></pre>

<p>The &lsquo;ensure&rsquo; attribute is actually created by the &lsquo;ensurable&rsquo; method from the Puppet::Type class. Any attribute calling &lsquo;ensurable&rsquo; gets the default &lsquo;present&#8217;and &#8216;absent&rsquo; values telling the type to call from the provider &lsquo;exists?()&rsquo; then based on output from &lsquo;exists?&rsquo; evaluates &lsquo;creates()&rsquo; or &lsquo;destroy()&rsquo;.</p>

<p>Ensure modifies the resource, but does not change the definition of what that resource is to the system, therefore ensure is a property.</p>

<p>Other properties of file are</p>

<pre><code>owner
group
content
</code></pre>

<p>Content? Yes, content. On a file system the content of the file does not define the file, the <em>$path</em> to the file is the definition of a file. Therefore content is just a charactaristic of that file, making that attribute a property as well.</p>

<h3><strong>Parameters</strong></h3>

<p>Parameters are used by Puppet to provision the resource onto the system. Parameters are resource attributes that can be retrieved and are used to create, or define the resource as it exists on the system.</p>

<pre><code>path =&gt; '/tmp/testing',
</code></pre>

<p>For example, the $namevar of the the file resource is the $path. That&rsquo;s because the $path of a file defines the resource on the system. You can query the path of a file, however if you change the path of a file you define an entierly new file. Therefore, $path is a parameter.</p>

<p>Another parameter of file would the checksum attribute. The checksum type is used when determining whether to replace a file’s contents. If your md5 checksum does not match the md5 checksum of the file on the system your file will be created; if it does match your file will not be updated if it exists; if it doesn&rsquo;t exist if will be provisioned. Checksum defines what the file should look like on the system; it&rsquo;s used by Puppet to provision the file but not stored as part of the file resource.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Brief Intro to Puppetizing STIG Compliance]]></title>
    <link href="httpL://www.jeffmalnick.com/blog/2014/03/20/brief-intro-to-puppetizing-stig-compliance/"/>
    <updated>2014-03-20T10:01:05-07:00</updated>
    <id>httpL://www.jeffmalnick.com/blog/2014/03/20/brief-intro-to-puppetizing-stig-compliance</id>
    <content type="html"><![CDATA[<p>STIG is a methodology for the implementation of security compliance across heterogeneous operating systems. Every OS has a specific STIG. The STIG for a given OS is maintained and distributed by the Defense Information Systems Agency (DISA). Current STIGs can be found on the <a href="http://iase.disa.mil/stigs/">DISA website</a>.</p>

<p>Puppet is an excellent tool for bringing machines into STIG compliance. At my previous job I was in <a href="https://github.com/malnick/do_debian_stig/blob/master/do_debian_stig.sh">shell script hell</a> until we spun up a POS master and started writing a STIG module that worked across all OS&rsquo;s we supported (14 linux distros, 30 territorial sys admins, ~250 nodes).</p>

<p>In doing a STIG module for puppet it’s best to just work from Cat 1 down. 1 &amp; 2 offenses are pretty big, 3 &amp; 4 are usually minor security patches and can be overlooked if you’re time crunched. Staying on top of the false positives and keeping your module up to date with actual security implementation is the biggest hurdle.</p>

<p>This document is a general guideline from my experience in implementing STIG compliance measures.</p>

<h3>Basic STIG Process</h3>

<ol>
<li><p>Go to the DISA site and download the STIG for the appropriate OS</p></li>
<li><p>Do some sort of benchmark scan on a base OS:</p>

<ul>
<li>I used retina (which is awful) scans that were preloaded with the appropriate <a href="http://www.public.navy.mil/spawar/Atlantic/ProductsServices/Pages/SCAP.aspx">Security Content Automation Protocol (SCAP)</a> documents (.xml files, see below).</li>
<li> You can also get SCAP benchmarks on the DISA site for the appropriate OS listed with the STIG benchmarks (see below on SCAP)</li>
</ul>
</li>
<li><p>Take retina report with categorized vulnerabilities and start writing puppet modules &ndash; oh wait, just kidding! first you’ll need to:</p>

<ol type="a">
<li> Check for false positives &ndash; in most cases the OS provider is way ahead of the game, and simply running ‘apt-get update’ or ‘yum update’ will take care of 80% of the vulnerabilities on the box. STIG guidelines are notoriously behind the OS and will have LOTS of false positives. Most of your time will be spent accounting for what is actually a vulnerability and what is actually already patched by the OS provider.</li>
</ol>
</li>
<li><p>What vulnerabilities are left after cross correlating with security patches are what you have to develop specified puppet classes for, this is actually the easy part.</p></li>
</ol>


<p>A really good resource for this is the <a href="https://fedorahosted.org/aqueduct/wiki/RhelStigProcess">Aqueduct Project</a> at Fedora. They’re really good about staying on top of the recent STIG process and also maintaining a set puppet module for STIGing RHEL boxes (or at least they used to, not sure what their status is now. A recent look shows they&rsquo;re only on RHEL 5 so&hellip;).</p>

<h3>SCAP</h3>

<p>The Security <a href="http://scap.nist.gov">Content Automation Protocol (SCAP)</a> is a protocol developed by the NSA puppet branch of government known as NIST for implementing IT security measures. Some parts of the protocol can be useful in scanning tools such as retina since the XML format for the vulnerability index are standardized.</p>

<p>For example, when you are on the DISA site looking at the current STIG for a specific OS there will be a download button for &lsquo;SCAP Benchmarks&rsquo;. This is a .zip of several .xml&rsquo;s that contain:</p>

<p><a href="http://scap.nist.gov/specifications/cpe/">Common Platform Enumeration (CPE)</a> files for describing and identifying classes of applications, operating systems, and hardware devices present among an enterprise&rsquo;s computing assets.</p>

<p><a href="http://oval.mitre.org">Open Vulnerability and Assessment Language (OVAL)</a> for assessing and reporting upon the rachine state.</p>

<p><a href="http://scap.nist.gov/specifications/xccdf/index.html">Extensible Configuration Checklist Description Format (XCCDF)</a> which is a structured collection of security configuration rules for some set of target systems.</p>

<p>&hellip; and maybe some other random ones as well.</p>

<p>This is a document in motion so I&rsquo;ll be adding more here, feel free to add as you find information as well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How To Install Rspec-Puppet on Puppet Enterprise]]></title>
    <link href="httpL://www.jeffmalnick.com/blog/2014/03/20/rspec-testing-puppet-enterprise-modules/"/>
    <updated>2014-03-20T09:42:50-07:00</updated>
    <id>httpL://www.jeffmalnick.com/blog/2014/03/20/rspec-testing-puppet-enterprise-modules</id>
    <content type="html"><![CDATA[<p>If you&rsquo;re getting into rspec testing for your manifests you might already know this:  Puppet Enterprise has it&rsquo;s own gem environment. This is a quick post on how to install rspec-puppet to your PE gem environment.</p>

<p>If you&rsquo;re new to rspec-puppet check out <a href="www.rspec-puppet.com">this great site</a> for a brief on installing (except if you&rsquo;re on PE, then follow the install below). rspec-puppet.com also has a great tutorial to get your up and running.</p>

<h3>Installing rspec-puppet on Puppet Enterprise</h3>

<p>If you&rsquo;ve already installed rspec-puppet via system gem you will get this error on rspec-puppet-init:</p>

<pre><code>[root@master users]# rspec-puppet-init 
/usr/lib/ruby/site_ruby/1.8/rubygems/custom_require.rb:31:in `gem_original_require': no such file to load -- puppet (LoadError)
</code></pre>

<p>If you&rsquo;ve already installed rspec-puppet vis system gem:</p>

<pre><code>$ /usr/bin/gem uninstall rspec-puppet
</code></pre>

<p>Once system rspec-puppet is removed:</p>

<pre><code>$ /opt/puppet/bin/gem install rspec-puppet
</code></pre>

<p>Then to init a new puppet rspec enviro in your $moduledir:</p>

<pre><code>$ /opt/puppet/bin/rspec-puppet-init
</code></pre>

<p>This should build:</p>

<pre><code>+ spec/
+ spec/classes/
+ spec/defines/
+ spec/functions/
+ spec/hosts/
+ spec/fixtures/
+ spec/fixtures/manifests/
+ spec/fixtures/modules/
+ spec/fixtures/modules/users/
+ spec/fixtures/manifests/site.pp
+ spec/fixtures/modules/users/manifests
+ spec/fixtures/modules/users/lib
+ spec/spec_helper.rb
+ Rakefile
</code></pre>

<h3>Installing PE-Specific Gems using PE-Gem Provider</h3>

<p><a href="https://github.com/puppetlabs/puppetlabs-pe_gem">puppetlabs/pe_gem</a> has the provider for pe_gem so you can simply:</p>

<pre><code>package { 'json':
    ensure   =&gt; present,
    provider =&gt; pe_gem,
    }
</code></pre>

<p>That&rsquo;s it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TLS/SSL DH Cipher Padding Bug in ActiveMQ]]></title>
    <link href="httpL://www.jeffmalnick.com/blog/2014/03/17/tls-slash-ssl-dh-cipher-padding-bug-in-activemq/"/>
    <updated>2014-03-17T16:23:11-07:00</updated>
    <id>httpL://www.jeffmalnick.com/blog/2014/03/17/tls-slash-ssl-dh-cipher-padding-bug-in-activemq</id>
    <content type="html"><![CDATA[<h3>Update</h3>

<p>As of March 18 it appears that Oracle has implemented a fix in their release of <a href="http://www.oracle.com/technetwork/java/javase/8train-relnotes-latest-2153846.html">JDK and Java Standard Edition version 8</a> and it&rsquo;s assocaited <a href="http://docs.oracle.com/javase/8/docs/technotes/guides/security/enhancements-8.html">security extensions</a>:</p>

<p>&ldquo;Support stronger ephemeral DH keys in the SunJSSE provider: Make ephemeral DH key match the length of the certificate key during SSL/TLS handshaking in the SunJSSE provider. A new system property, jdk.tls.ephemeralDHKeySize, is defined to customize the ephemeral DH key sizes. The minimum acceptable DH key size is 1024 bits, except for exportable cipher suites or legacy mode (jdk.tls.ephemeralDHKeySize=legacy). See Customizing Size of Ephemeral DH Keys and RFE 6956398.&rdquo;</p>

<hr />

<p>In helping a client with an ActiveMQ issue in Puppet Enterprise I recently stumbled across this line in their wrapper log:</p>

<pre><code>INFO | jvm 1 | 2014/02/26 12:47:20 | WARN | Transport Connection to: tcp://ip.removed:49867 failed: javax.net.ssl.SSLHandshake
Exception: Invalid Padding length: 239
</code></pre>

<p>The client thought this may have been exacberating a JVM memory problem, however I found it actually is a not related but in and of itself it&rsquo;s own  bug in the Java Security Extensions for Diffe-Helman cipher implementation over SSL.</p>

<p>We have seen similar issues in JDK 1.7x security extensions in other Java-powered backends for Puppet Enterprise such as <a href="http://projects.puppetlabs.com/issues/19884">PuppetDB</a>. It has also been documented on the <a href="https://issues.apache.org/jira/browse/APLO-287">Apache ActiveMQ ticket board</a> and the <a href="https://community.oracle.com/message/11001587">Oracle community</a> board.</p>

<p>The issue is dependant on:</p>

<pre><code>* OpenJDK Runtime Environment (PE Java 1.7.0.19) 
* Linux OS's (so far my testing is on CentOS 6x) 
* TLS_DHE_RSA_WITH_AES_128_CBC_SHA Cipher
* openssl-1.0.0-27.el6_4.2.x86_64
</code></pre>

<p>To sum up the problem, every few hundred messages that are encrypted over SSL or TLS using DH ciphers the client gets a handshake exception. The exception is caused by a faulty SSL packet.</p>

<h3>Oracle&rsquo;s Solution</h3>

<p><a href="http://bugs.java.com/bugdatabase/view_bug.do?bug_id=8013059">A ticket was submitted</a> to Java bugs and was set &ldquo;resolved&rdquo; on 2013-10-25. However, and this is a big however, their resolution is, &ldquo;In order to have reliable TLS handshakes, Diffie Hellman key exchanges must be disabled.&rdquo;</p>

<p>I personally don&rsquo;t like this resolution since DH keys are sometimes neccessary, and in terms of security is superior to standard RSA ciphers. DH ciphers provide perfect forward secrecy. That means even if the private key is compromised you can not decrypt past data. Ciper suites which use DHE-RSA-AES128-SHA all implement the slower, more secure ephemeral DH crypto &ndash; it&rsquo;s ephemeral since new random numbers that generate the key are used each time. This is also why it&rsquo;s slower. However, it&rsquo;s also harder to run a selected clear text attack on EDH since the private key is used for only authentication and use an independant method to agree on a shared secret &ndash; standard RSA ciphers employ the private key for both auth and encryption for better performance in exchange for not providing perfect forward secrecy.</p>

<p>You may now chime in with your own conspiracy theories as to why Oracle would settle for solving this cyrpto issue by simply using a less secure cipher &ndash; does the NSA not want Java applications, which function as the backbone to a great deal of web traffic, encrypting data with perfect forward secrecy?</p>

<h3>Workaround in AMQ</h3>

<p>Since there is no good way to get around this problem in JDK 1.7x security extensions you have two choices:</p>

<pre><code>1. Live with the error in approx. 5% of the SSL traffic
2. Run SSL with a non-DH or DHE cipher  
</code></pre>

<h4>Door #1</h4>

<p>Example, you&rsquo;ve got an AMQ broker administering messaging for 1000+ AMQ agents in a live management setup in Puppet Enterprise you&rsquo;ll see this error a lot, and it may (warning, assumption) degrade live management performance in such a large deployment.</p>

<p>If you can live with either seeing this error 5% of the time or you can live with the hit in performance sticking it out with DH can still work.</p>

<h4>Door #2</h4>

<p>You need the performance or are a stickler for perfect SSL key exchange.</p>

<p>A possible solution would be modifying the transportConnector in /etc/puppetlabs/activemq/activemq.xml:</p>

<pre><code>&lt;transportConnector name="openwire" uri="ssl://0.0.0.0:61616"/&gt;
&lt;!-- Puppet mcollective_enable_stomp_ssl=true
&lt;transportConnector name="stomp+ssl" uri="stomp+ssl://0.0.0.0:61613"/&gt;\
</code></pre>

<p>With the transport.enabledCipherSuites embedded:</p>

<pre><code>ssl://localhost:61616?transport.enabledCipherSuites=SSL_RSA_WITH_3DES_EDE_CBC_SHA
</code></pre>

<p>The SSL_RSA_WITH_3DES_EDE_CBC_SHA is non-DH cipher versus the  SSL_DH_anon_WITH_3DES_EDE_CBC_SHA which I think is what AMQ currently uses.</p>

<p>Note syntax:</p>

<pre><code>ssl://…?socket.enabledCipherSuites=THE_CIPHER # for agents 
</code></pre>

<p>and</p>

<pre><code>ssl://…?transport.enabledCipherSuites=THE_CIPHER # for brokers 
</code></pre>

<p>More information about this can be found on the <a href="https://activemq.apache.org/ssl-transport-reference.html">AMQ reference page</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging ActiveMQ JVM Heap Memory Errors]]></title>
    <link href="httpL://www.jeffmalnick.com/blog/2014/03/12/debugging-activemq-jvm-heap-memory-errors/"/>
    <updated>2014-03-12T21:08:06-07:00</updated>
    <id>httpL://www.jeffmalnick.com/blog/2014/03/12/debugging-activemq-jvm-heap-memory-errors</id>
    <content type="html"><![CDATA[<h2>This just happened:</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>INFO   | jvm 1    | 2014/03/11 16:12:34 | Exception in thread "ActiveMQ BrokerService[ppm.prod.dc2.adpghs.com] Task-79" Exception in thread "ActiveMQ BrokerService[ppm.prod.dc2.adpghs.com] Task-101" Exception in thread "ActiveMQ BrokerService[ppm.prod.dc2.adpghs.com] Task-87" Exception in thread "ActiveMQ BrokerService[ppm.prod.dc2.adpghs.com] Task-30" Exception in thread "ActiveMQ BrokerService[ppm.prod.dc2.adpghs.com] Task-74" java.lang.OutOfMemoryError: unable to create new native thread</span></code></pre></td></tr></table></div></figure>


<p>Since this is on a production server you need to recreate it in a testing environment. Since I&rsquo;m partial to vagrant I stand up 4 agent nodes and a master via pe-build vagrant plugin. My Vagrantfile looks something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># -*- mode: ruby -*-</span>
</span><span class='line'><span class="c1"># vi: set ft=ruby :</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Vagrantfile API/syntax version. Don&#39;t touch unless you know what you&#39;re doing!</span>
</span><span class='line'><span class="no">VAGRANTFILE_API_VERSION</span> <span class="o">=</span> <span class="s2">&quot;2&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="no">VAGRANTFILE_API_VERSION</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;centos-64-x64-nocm&quot;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box_url</span> <span class="o">=</span> <span class="s2">&quot;http://puppet-vagrant-boxes.puppetlabs.com/centos-64-x64-fusion503-nocm.box&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">pe_build</span><span class="o">.</span><span class="n">version</span>       <span class="o">=</span> <span class="s1">&#39;3.1.0&#39;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">pe_build</span><span class="o">.</span><span class="n">download_root</span> <span class="o">=</span> <span class="s1">&#39;https://s3.amazonaws.com/pe-builds/released&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">## Master</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">define</span> <span class="ss">:master</span> <span class="k">do</span> <span class="o">|</span><span class="n">master</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">master</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provider</span> <span class="ss">:vmware_fusion</span> <span class="k">do</span> <span class="o">|</span><span class="n">v</span><span class="o">|</span>
</span><span class='line'>      <span class="n">v</span><span class="o">.</span><span class="n">vmx</span><span class="o">[</span><span class="s2">&quot;memsize&quot;</span><span class="o">]</span>  <span class="o">=</span> <span class="s2">&quot;4096&quot;</span>
</span><span class='line'>      <span class="n">v</span><span class="o">.</span><span class="n">vmx</span><span class="o">[</span><span class="s2">&quot;numvcpus&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;4&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">master</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="ss">:private_network</span><span class="p">,</span> <span class="ss">ip</span><span class="p">:</span> <span class="s2">&quot;10.10.100.100&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">master</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">hostname</span> <span class="o">=</span> <span class="s1">&#39;master.puppetlabs.vm&#39;</span>
</span><span class='line'>    <span class="n">master</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="ss">:hosts</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">master</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="ss">:pe_bootstrap</span> <span class="k">do</span> <span class="o">|</span><span class="n">pe</span><span class="o">|</span>
</span><span class='line'>      <span class="n">pe</span><span class="o">.</span><span class="n">role</span> <span class="o">=</span> <span class="ss">:master</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="s2">&quot;shell&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">inline</span><span class="p">:</span> <span class="s2">&quot;service iptables stop&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">## agent 1</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">define</span> <span class="ss">:agent1</span> <span class="k">do</span> <span class="o">|</span><span class="n">agent</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">agent</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provider</span> <span class="ss">:vmware_fusion</span>
</span><span class='line'>    <span class="n">agent</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="ss">:private_network</span><span class="p">,</span> <span class="ss">ip</span><span class="p">:</span> <span class="s2">&quot;10.10.100.111&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">agent</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">hostname</span> <span class="o">=</span> <span class="s1">&#39;agent1.puppetlabs.vm&#39;</span>
</span><span class='line'>    <span class="n">agent</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="ss">:hosts</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">agent</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="ss">:pe_bootstrap</span> <span class="k">do</span> <span class="o">|</span><span class="n">pe</span><span class="o">|</span>
</span><span class='line'>      <span class="n">pe</span><span class="o">.</span><span class="n">role</span>   <span class="o">=</span>  <span class="ss">:agent</span>
</span><span class='line'>      <span class="n">pe</span><span class="o">.</span><span class="n">master</span> <span class="o">=</span> <span class="s1">&#39;master.puppetlabs.vm&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">## agent 2</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">define</span> <span class="ss">:agent2</span> <span class="k">do</span> <span class="o">|</span><span class="n">agent</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">agent</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provider</span> <span class="ss">:vmware_fusion</span>
</span><span class='line'>    <span class="n">agent</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="ss">:private_network</span><span class="p">,</span> <span class="ss">ip</span><span class="p">:</span> <span class="s2">&quot;10.10.100.112&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">agent</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">hostname</span> <span class="o">=</span> <span class="s1">&#39;agent2.puppetlabs.vm&#39;</span>
</span><span class='line'>    <span class="n">agent</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="ss">:hosts</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">agent</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="ss">:pe_bootstrap</span> <span class="k">do</span> <span class="o">|</span><span class="n">pe</span><span class="o">|</span>
</span><span class='line'>      <span class="n">pe</span><span class="o">.</span><span class="n">role</span>   <span class="o">=</span>  <span class="ss">:agent</span>
</span><span class='line'>      <span class="n">pe</span><span class="o">.</span><span class="n">master</span> <span class="o">=</span> <span class="s1">&#39;master.puppetlabs.vm&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">## agent 3</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">define</span> <span class="ss">:agent3</span> <span class="k">do</span> <span class="o">|</span><span class="n">agent</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">agent</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provider</span> <span class="ss">:vmware_fusion</span>
</span><span class='line'>    <span class="n">agent</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="ss">:private_network</span><span class="p">,</span> <span class="ss">ip</span><span class="p">:</span> <span class="s2">&quot;10.10.100.113&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">agent</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">hostname</span> <span class="o">=</span> <span class="s1">&#39;agent3.puppetlabs.vm&#39;</span>
</span><span class='line'>    <span class="n">agent</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="ss">:hosts</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">agent</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="ss">:pe_bootstrap</span> <span class="k">do</span> <span class="o">|</span><span class="n">pe</span><span class="o">|</span>
</span><span class='line'>      <span class="n">pe</span><span class="o">.</span><span class="n">role</span>   <span class="o">=</span>  <span class="ss">:agent</span>
</span><span class='line'>      <span class="n">pe</span><span class="o">.</span><span class="n">master</span> <span class="o">=</span> <span class="s1">&#39;master.puppetlabs.vm&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">## agent 4</span>
</span><span class='line'>   <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">define</span> <span class="ss">:agent4</span> <span class="k">do</span> <span class="o">|</span><span class="n">agent</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">agent</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provider</span> <span class="ss">:vmware_fusion</span> <span class="k">do</span> <span class="o">|</span><span class="n">v</span><span class="o">|</span>
</span><span class='line'>      <span class="n">v</span><span class="o">.</span><span class="n">vmx</span><span class="o">[</span><span class="s2">&quot;memsize&quot;</span><span class="o">]</span>  <span class="o">=</span> <span class="s2">&quot;1024&quot;</span>
</span><span class='line'>      <span class="n">v</span><span class="o">.</span><span class="n">vmx</span><span class="o">[</span><span class="s2">&quot;numvcpus&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;2&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">agent</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="ss">:private_network</span><span class="p">,</span> <span class="ss">ip</span><span class="p">:</span> <span class="s2">&quot;10.10.100.114&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">agent</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">hostname</span> <span class="o">=</span> <span class="s1">&#39;agent4.puppetlabs.vm&#39;</span>
</span><span class='line'>    <span class="n">agent</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="ss">:hosts</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">agent</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="ss">:pe_bootstrap</span> <span class="k">do</span> <span class="o">|</span><span class="n">pe</span><span class="o">|</span>
</span><span class='line'>      <span class="n">pe</span><span class="o">.</span><span class="n">role</span> <span class="o">=</span> <span class="ss">:agent</span>
</span><span class='line'>      <span class="n">pe</span><span class="o">.</span><span class="n">master</span> <span class="o">=</span> <span class="s1">&#39;master.puppetlabs.vm&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This error occured on an ActiveMQ install that works as the message que for a 1000 node deployment of puppet agents. To get terminology straight here, we have puppet agents and AMQ agents running on these 1000 nodes. They&rsquo;re all qued from a singular AMQ broker.</p>

<p>My first impression was that this error may be caused by having 1000 agents pinging a single AMQ broker, which is limited to 800 via fds instances.</p>

<p>I check locally on my test master:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>root@master vagrant<span class="o">]</span><span class="c"># pgrep -f pe-activemq</span>
</span><span class='line'>1271
</span><span class='line'><span class="o">[</span>root@master vagrant<span class="o">]</span><span class="c"># cat /proc/1271/limits | grep files</span>
</span><span class='line'>Max open files            1024                 4096                 files
</span></code></pre></td></tr></table></div></figure>


<p>My soft limit is 1024 open files, and after rando .jars and logs and stuff that really feels like more around 800. So this is on the money, as far as what the docs say for ActiveMQ servers per broker.</p>

<h3>How am I going to recreate what a 1000 node enviro looks like?</h3>

<p>I&rsquo;m limited to my laptop, 16GB of memory, and I&rsquo;m too lazy to stand up 1000 instances in AWS (and to poor). So an attempt has to be made to recreate this memory error on my 5 nodes running locally.</p>

<p>Given the above information, I start open a shell, and ssh into my master:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>root@master vagrant<span class="o">]</span><span class="c"># echo -n &quot;Max open files=3:3&quot; &gt; /proc/1271/limits</span>
</span><span class='line'><span class="o">[</span>root@master vagrant<span class="o">]</span><span class="c"># cat /proc/1271/limits | grep files</span>
</span><span class='line'>Max open files            3                    3                    files
</span></code></pre></td></tr></table></div></figure>


<p>Why 3? Because:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>root@master vagrant<span class="o">]</span><span class="c"># ls /proc/1271/fd | wc -l</span>
</span><span class='line'>6
</span></code></pre></td></tr></table></div></figure>


<p>So a quick &lsquo;service pe-activemq restart&rsquo; and bang&hellip;</p>

<p>Oh shit, new PID, new proc instance. Damnit. I have to figure out something else to fake the resource limits here.</p>

<p>Since ulimit commands are shell-bound I can ssh into the master from another shell and run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="n">root</span><span class="vi">@master</span> <span class="n">vagrant</span><span class="o">]</span><span class="c1"># ulimit -n 10</span>
</span><span class='line'><span class="o">[</span><span class="n">root</span><span class="vi">@master</span> <span class="n">vagrant</span><span class="o">]</span><span class="c1"># service pe-activemq restart</span>
</span><span class='line'><span class="sr">/etc/ini</span><span class="n">t</span><span class="o">.</span><span class="n">d</span><span class="o">/</span><span class="ss">functions</span><span class="p">:</span> <span class="n">redirection</span> <span class="ss">error</span><span class="p">:</span> <span class="n">cannot</span> <span class="n">duplicate</span> <span class="ss">fd</span><span class="p">:</span> <span class="no">Invalid</span> <span class="n">argument</span>
</span><span class='line'><span class="no">Stopping</span> <span class="n">pe</span><span class="o">-</span><span class="ss">activemq</span><span class="p">:</span>                                      <span class="o">[</span>  <span class="no">OK</span>  <span class="o">]</span>
</span><span class='line'><span class="no">Starting</span> <span class="n">pe</span><span class="o">-</span><span class="ss">activemq</span><span class="p">:</span>                                      <span class="o">[</span>  <span class="no">OK</span>  <span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The trick here is getting close enough to the lowest possible resource limits with out getting the</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bash: start_pipeline: pgrp pipe: Too many open files
</span><span class='line'>/bin/sh: error while loading shared libraries: libtinfo.so.5: cannot open shared object file: Error 24</span></code></pre></td></tr></table></div></figure>


<p>error.</p>

<p>3 was actually too low, so I ran with 10 and was able to run a restart. You have to account for other files that may be bound to the PID instance, like logs and .jars since this is a bunch of java. And as everyone knows, Java is basically the pig of programming languages.</p>

<p>So 10 fds worked and activemq has restarted. Let&rsquo;s look at my logs to see what I&rsquo;ve got:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>INFO   | jvm 5    | 2014/03/13 04:46:13 | Error: Exception thrown by the agent : java.rmi.server.ExportException: Listen failed on port: 0; nested exception is:
</span><span class='line'>INFO   | jvm 5    | 2014/03/13 04:46:13 |     java.net.SocketException: Too many open files</span></code></pre></td></tr></table></div></figure>


<p>That isn&rsquo;t what I wanted to see. I am looking for heap memory errors. So this clearly demonstrates it&rsquo;s not an fds constraint at the filesystem level. Time to move on to other possibilities.</p>

<h3>Possible Culprits</h3>

<ol>
<li><p>The JVM</p>

<ul>
<li>Consider increasing the total heap memory available to the broker JVM</li>
<li>Consider reducing the default JVM stack size of each thread using -xss</li>
<li>If your broker is embedded ensure the hostiong JVM has appropriate heap and stack sizes.</li>
</ul>
</li>
<li><p>The broker</p>

<ul>
<li>Broker memory is not JVM memory, it&rsquo;s only a constraint &ndash; the broker manages it&rsquo;s own memory.</li>
<li>Setting appropriate systemUsage memory: <a href="http://activemq.apache.org/producer-flow-control.html#ProducerFlowControl-Systemusage">http://activemq.apache.org/producer-flow-control.html#ProducerFlowControl-Systemusage</a></li>
<li>Hard limits exist on the number of agents a single broker can handle due to file descriptors and other hard system resources</li>
</ul>
</li>
</ol>


<h3>Solutions</h3>

<p>Check your log for current JVM heap size:</p>

<pre><code>INFO   | jvm 1    | 2014/02/26 12:47:04 |   Heap sizes: current=506816k  free=487246k  max=506816k
</code></pre>

<p>Try bumping this up to 1GB in</p>

<pre><code> /etc/puppetlabs/activemq/wrapper.conf
</code></pre>

<p>If you still get</p>

<pre><code>INFO   | jvm 1    | 2014/02/26 12:47:38 | Exception in thread "ActiveMQBrokerService[ppm.prod.dc2.adpghs.com] Task-58" java.lang.OutOfMemoryError: unable to create new native thread 
</code></pre>

<p>in your</p>

<pre><code>/var/log/pe-activemq/wrapper.log
</code></pre>

<p>then throttle up your systemUsage in</p>

<pre><code>/etc/puppetlabs/activemq/activemq.xml
</code></pre>

<p>per <a href="http://activemq.apache.org/producer-flow-control.html#ProducerFlowControl-Systemusage">this guideline</a></p>

<h3>Hard Limits of AMQ</h3>

<p>If you still get OOM errors you may be at a hard limit for agents per broker. ActiveMQ uses the amqPersistenceAdapter by default for persistent messages. Unfortunately, this persistence adapter (as well as the kahaPersistenceAdapter) opens a file descriptor for each queue. When creating large numbers of queues, you&rsquo;ll quickly run into the limit for your OS.</p>

<p>However, your logs will not register a OOM error as above, they&rsquo;ll show</p>

<pre><code>ERROR  | wrapper  | 2014/03/13 03:32:39 | JVM exited while loading the application.
INFO   | jvm 4    | 2014/03/13 03:32:39 | Error: Exception thrown by the agent : java.rmi.server.ExportException: Listen failed on port: 0; nested exception is:
INFO   | jvm 4    | 2014/03/13 03:32:39 | java.net.SocketException: Too many open files
</code></pre>

<p>If that is your error your could try upping the limit on file descripters per process. You can do something similar to what I did above or <a href="http://tinyurl.com/o9qs2f">Google for your OS</a>.</p>

<p>At this point if none of the above resolved the issues you should try standing up a second broker, especially if you&rsquo;re running more than 1000 agents on a single broker instance.</p>

<p>You can read more about <a href="http://activemq.apache.org/networks-of-brokers.html">standing up networks of brokers</a> and also <a href="http://activemq.apache.org/performance.html">AMQ performance</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extracting JSON from Puppet YAML Report]]></title>
    <link href="httpL://www.jeffmalnick.com/blog/2014/01/17/extracting-json-from-puppet-yaml-report/"/>
    <updated>2014-01-17T06:55:04-08:00</updated>
    <id>httpL://www.jeffmalnick.com/blog/2014/01/17/extracting-json-from-puppet-yaml-report</id>
    <content type="html"><![CDATA[<h3>YAML &ndash;> JSON via Puppet Gen&#8217;ed YAML</h3>

<p>In a follow up to the post below, I started thinking about ways to generate a D3 readable JSON on the fly from the puppet generated YAML. I started by using a parser from the node library &lsquo;js-yaml&rsquo;. My YAML format looked like this:</p>

<figure class='code'><figcaption><span>last_puppet_run.yaml</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'>  <span class="l-Scalar-Plain">metrics</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">resources</span><span class="p-Indicator">:</span> <span class="kt">!ruby</span><span class="l-Scalar-Plain">/object:Puppet::Util::Metric</span>
</span><span class='line'>      <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">resources</span>
</span><span class='line'>      <span class="l-Scalar-Plain">label</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Resources</span>
</span><span class='line'>      <span class="l-Scalar-Plain">values</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">total</span>
</span><span class='line'>          <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Total</span>
</span><span class='line'>          <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">197</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">skipped</span>
</span><span class='line'>          <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Skipped</span>
</span><span class='line'>          <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">6</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">failed</span>
</span><span class='line'>          <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Failed</span>
</span><span class='line'>          <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">0</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">failed_to_restart</span>
</span><span class='line'>          <span class="p-Indicator">-</span> <span class="s">&quot;Failed</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">restart&quot;</span>
</span><span class='line'>          <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">0</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">restarted</span>
</span><span class='line'>          <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Restarted</span>
</span><span class='line'>          <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">0</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">changed</span>
</span><span class='line'>          <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Changed</span>
</span><span class='line'>          <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">0</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">out_of_sync</span>
</span><span class='line'>          <span class="p-Indicator">-</span> <span class="s">&quot;Out</span><span class="nv"> </span><span class="s">of</span><span class="nv"> </span><span class="s">sync&quot;</span>
</span><span class='line'>          <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">0</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">scheduled</span>
</span><span class='line'>          <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Scheduled</span>
</span><span class='line'>          <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">0</span>
</span><span class='line'><span class="nn">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>My original stab at parsing this YAML failed when using the js-yaml node library. This was due to the fact that this is Puppet YAML &ndash; it was generated by a ruby class denoted at the top of the file:</p>

<figure class='code'><figcaption><span>last_puppet_run.yaml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="err">   </span><span class="l-Scalar-Plain">resources</span><span class="p-Indicator">:</span> <span class="kt">!ruby</span><span class="l-Scalar-Plain">/object:Puppet::Util::Metric</span>
</span></code></pre></td></tr></table></div></figure>


<p>So the way to parse this file into a JSON would have to be done using a ruby script where I could import the &lsquo;puppet&rsquo; class directly so the YAML lib would know how to read this particular file. I thought this would be as simple as:</p>

<figure class='code'><figcaption><span>test.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;puppet&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;yaml&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;json&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">datajson</span> <span class="o">=</span> <span class="s1">&#39;report.json&#39;</span>
</span><span class='line'><span class="n">datafile</span>  <span class="o">=</span> <span class="s1">&#39;last_run_report.yaml&#39;</span>
</span><span class='line'><span class="n">yaml</span> <span class="o">=</span> <span class="no">YAML</span><span class="o">.</span><span class="n">load_file</span><span class="p">(</span><span class="n">datafile</span><span class="p">)</span>
</span><span class='line'><span class="n">json</span> <span class="o">=</span> <span class="n">yaml</span><span class="o">.</span><span class="n">to_json</span>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">datajson</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="o">.</span><span class="n">write</span> <span class="n">json</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>What I didn&rsquo;t count on was serialization.</p>

<h3>Serialization</h3>

<p>What would you expect that output to be? I&rsquo;ll give you one clue, it did look like a JSON&hellip; sorta:</p>

<figure class='code'><figcaption><span>report.json </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span><span class="nt">&quot;metrics&quot;</span><span class="p">:{</span><span class="nt">&quot;resources&quot;</span><span class="p">:</span><span class="s2">&quot;#&lt;Puppet::Util::Metric:0x007f8fb8cda088&gt;&quot;</span><span class="p">,</span><span class="nt">&quot;time&quot;</span><span class="p">:</span><span class="s2">&quot;#&lt;Puppet::Util::Metric:0x007f8fb8cd80f8&gt;&quot;</span><span class="p">,</span><span class="nt">&quot;changes&quot;</span><span class="p">:</span><span class="s2">&quot;#&lt;Puppet::Util::Metric:0x007f8fb8ce1608&gt;&quot;</span><span class="p">,</span><span class="nt">&quot;events&quot;</span><span class="p">:</span><span class="s2">&quot;#&lt;Puppet::Util::Metric:0x007f8fb8ce0eb0&gt;&quot;</span><span class="p">},</span><span class="nt">&quot;logs&quot;</span><span class="p">:[</span><span class="s2">&quot;Finished catalog run in 5.57 seconds&quot;</span><span class="p">],</span><span class="nt">&quot;resource_statuses&quot;</span><span class="p">:{</span><span class="nt">&quot;Schedule[daily]&quot;</span><span class="p">:</span><span class="s2">&quot;#&lt;Puppet::Resource::Status:0x007f8fb8ceaaf0&gt;&quot;</span><span class="p">,</span><span class="nt">&quot;Schedule[monthly]&quot;</span><span class="p">:</span><span class="s2">&quot;#&lt;Puppet::Resource::Status:0x007f8fb8ce84f8&gt;&quot;</span><span class="p">,</span><span class="nt">&quot;Schedule[hourly]&quot;</span><span class="p">:</span>
</span></code></pre></td></tr></table></div></figure>


<p>What&rsquo;s happening here? What happened to all our nice data, all of the sudden it&rsquo;s not human friendly anymore. This data is serialized, it&rsquo;s a by-product of using &lsquo;.to_json&rsquo; which is akin to saying &lsquo;JSON::dump(datafile)&rsquo;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[test]]></title>
    <link href="httpL://www.jeffmalnick.com/blog/2014/01/13/test/"/>
    <updated>2014-01-13T09:35:57-08:00</updated>
    <id>httpL://www.jeffmalnick.com/blog/2014/01/13/test</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Puppet Run Vis]]></title>
    <link href="httpL://www.jeffmalnick.com/blog/2014/01/06/puppet-run-vis/"/>
    <updated>2014-01-06T00:00:00-08:00</updated>
    <id>httpL://www.jeffmalnick.com/blog/2014/01/06/puppet-run-vis</id>
    <content type="html"><![CDATA[<h3>D3 Visualization for a Puppet Run</h3>

<p>One of the common complaints with puppet, especially puppet enterprise (PE) is that it does not scale as one would hope. In example, the PE console. EVERY NODE must report to the console in PE. So, if, for example, you&rsquo;re a sysadmin working with 10,000+ or even 1,000+ PE nodes you&rsquo;re going to have a crazy busy console.</p>

<p>To make this problem more managable a visualization is necessary &ndash; until humans start developing USB ports for their brains. Here I propose one such way to manage this using D3 as the visualization tool and the post-run YAML log from PuppetDB.</p>

<p>The main issue here is in developing such a debugging tool I would hope to alliviate and not add to the already cumbersome way console manages 1000&rsquo;s of nodes. The tool should scale to &lsquo;n&rsquo; number of nodes &ndash; if there are 10 or 10,000,000 nodes I want this tool to be able to help the user troubleshoot errors on three axes:</p>

<pre><code>* Time - the time the error occured in the context of the run
* Error type - red for failure, orange for warning, green for successful
* Resource Invovled - the resource that either failued, generated warning or was successful. 
</code></pre>

<p>So in my mind, I have this layout which actually involved a couple layers:</p>

<pre><code>* View 1 - Circular graph; inner circle represents precentage of nodes with failures in red; mid circle is percentage of nodes with warnings in orange; outer circle is percentage of nodes with no errors in green.
* View 2 - Click on red area of graph; transition to new circular graph of same circumfrance; starting at 12 o'clock and moving clockwise around the graph is time, each 360 rotation starts a new level; each level is denoted by the number of failures; each failure's area or degrees of circumfrance is the precentage of nodes with that error. 
    * In eaxmple: if you have a 5 errors over 50 nodes, each with 10 instances of those 5 errors the area of the graph that the error takes up would be equally distributed through out the circle starting at time -0 at 12 o'clock moving clockwise around the circle (ok maybe a tarus now) until a equal number of levels has been reached once the center of the circle or tarus has been reached.
* View 3 - same as 2 but for warnings (orange).
* View 4 - same as 2 but for successes or no error (green).
</code></pre>

<p>Something similar to this: <a href="http://xliberation.com/parse/colortable/parsed3.html">http://xliberation.com/parse/colortable/parsed3.html</a></p>

<p>The initial view is simple, it is a ratio of nodes in three categories of &ldquo;has failures (center, red)&rdquo;, &ldquo;has warnings (mid circle, orange)&rdquo; and &ldquo;has no errors (outter circle, green)&rdquo;.</p>

<p>How do we deal with nodes with errors, warnings and successes? We lop them into the lowest common denomenator: if it has successes and warnings it goes to the warning loop; if it has successes warnings and errors it goes to error loop; if it has successes and errors it goes to error.</p>

<p>Our lowest common denomenator is the fact that we are only concerned with nodes that have errors or warnings, if it&rsquo;s successful that&rsquo;s great, we want to see it but errors are the what we are debugging.</p>

<h3>&lsquo;n&rsquo; scalability</h3>

<p>It needs to happen.</p>

<p>Humans are bad at abstracting long lists. I mean, &ldquo;node so-and-so had error this-and-that&rdquo; for 10,000,000 lines isn&rsquo;t so helpful. Sure, &ldquo;&mdash;trace&rdquo; or &ldquo;&mdash;debug&rdquo; is helpful, but ITSALOTOFLINESOFCODE&#8221;.</p>

<p>Humans can abstract information on more levels than &ldquo;line 1, 2,3&hellip;.&lsquo;n&rsquo;&rdquo;. We have 5 complete senses (for most of us!) so we should leverage a few more than textual abstractions of code. Color, shapes, area graphs; abstracting the run levels of a puppet run into &ldquo;zooms&rdquo;. These are all available to us.</p>

<h3>D3</h3>

<p>D3 is a javascript lib that talks directly to the DOM to quickly and efficiently create interactive scalable vector graphics.</p>

<p>What?</p>

<p>It means it can run in the PE console with little overhead, take it&rsquo;s datasets from the parsed YAML in PuppetDB via some savvy js-yaml action and run in basically any browser.</p>

<p>All you need to know is it&rsquo;s super rad.. and more importantly, proven.</p>

<h3>HOW DO WE PARSE THE YAML</h3>

<p>js-yaml, maybe. Or some other YAML to JSON converter that we can get arrays of data out of the YAML from for our JS D3 vis. That isn&rsquo;t so difficult.</p>

<p>Our PuppetDB YAML looks a little like this (for an example, I&rsquo;m using the first couple lines):</p>

<figure class='code'><figcaption><span>last_puppet_run.yaml</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span> <span class="kt">!ruby</span><span class="l-Scalar-Plain">/object:Puppet::Transaction::Report</span>
</span><span class='line'><span class="l-Scalar-Plain">metrics</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="l-Scalar-Plain">resources</span><span class="p-Indicator">:</span> <span class="kt">!ruby</span><span class="l-Scalar-Plain">/object:Puppet::Util::Metric</span>
</span><span class='line'><span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">resources</span>
</span><span class='line'><span class="l-Scalar-Plain">label</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Resources</span>
</span><span class='line'><span class="l-Scalar-Plain">values</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">total</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Total</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">85</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">skipped</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Skipped</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">0</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">failed</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Failed</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">1</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">failed_to_restart</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="s">&quot;Failed</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">restart&quot;</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">0</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">restarted</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Restarted</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">0</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">changed</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Changed</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">0</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">out_of_sync</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="s">&quot;Out</span><span class="nv"> </span><span class="s">of</span><span class="nv"> </span><span class="s">sync&quot;</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">1</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">scheduled</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Scheduled</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>A converstion of this file to JSON would output something like:</p>

<figure class='code'><figcaption><span>last_puppet_run.json </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;metrics&quot;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;resources&quot;</span><span class="p">:</span> <span class="s2">&quot;!ruby/object:Puppet::Util::Metric&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;!ruby/sym executed_command&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;label&quot;</span><span class="p">:</span> <span class="s2">&quot;Events&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;values&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;- total&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;Total&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;- failure&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;Failure&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;- success&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;Success&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">0</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This was encoded to JSON via: <a href="https://npmjs.org/package/yamljs">https://npmjs.org/package/yamljs</a></p>

<pre><code>yaml2json last_run_report.yaml --pretty
</code></pre>

<h3>First steps to building the vis</h3>

<p>Start with an NGINX server running on localhost:8888 serving up the /www directory from my github.com/puppetlabs/banyan.</p>

<p>Then I start with figuring out how the heck D3 works. Well, luckily for me it&rsquo;s pretty simple. You start by defining some CSS elements for the vis. In my case, I wanted to simply see how I would grab data from the YAML, parsed to JSON and push it into D3.</p>

<p>Let&rsquo;s start small:</p>

<figure class='code'><figcaption><span>index.html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;head&gt;</span>
</span><span class='line'>        <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;title&gt;</span>D3 Test Visualization for PE Run<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;style&gt;</span>
</span><span class='line'>  <span class="nc">.chart</span> <span class="nt">div</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font</span><span class="o">:</span> <span class="m">10px</span> <span class="k">sans-serif</span><span class="p">;</span>
</span><span class='line'>  <span class="k">background-color</span><span class="o">:</span> <span class="nb">steelblue</span><span class="p">;</span>
</span><span class='line'>  <span class="k">text-align</span><span class="o">:</span> <span class="k">right</span><span class="p">;</span>
</span><span class='line'>  <span class="k">padding</span><span class="o">:</span> <span class="m">3px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin</span><span class="o">:</span> <span class="m">1px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="nb">white</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nt">&lt;/style&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This initializes a bar chart and the colors, alignment and all the other CSS crap that will be used over and over again in the SVG. I&rsquo;ll use .chart as a CSS div element below.</p>

<p>Then we need to tell the DOM that we&rsquo;re going to be using D3.js in our HTML script tags:</p>

<figure class='code'><figcaption><span>index.html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://d3js.org/d3.v3.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok, phew, that was rough right? Right. Because I&rsquo;m an ops guy and this dev shit is for the&hellip;</p>

<p>Anyways back to the meat of the index.html, our D3 script.</p>

<p>Let&rsquo;s declare the script tags and initialize some vars that we&rsquo;ll use in the test code:</p>

<figure class='code'><figcaption><span>index.html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'> <span class="nt">&lt;body&gt;</span>
</span><span class='line'>        <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        var data;
</span><span class='line'>        var eval_time;
</span><span class='line'>        var draw_this = new Array();
</span></code></pre></td></tr></table></div></figure>


<p>Now lets parse that JSON I created from before via the YAML puppet_run_report. D3 is SO RAD that it ships with a nice JSON importer called &lsquo;d3.json&rsquo;. We&rsquo;re going to use it here to grab the &lsquo;evaluation_time&rsquo; metric from the parsed YAML (now a JSON) and push it into an array that we will eventually use to draw a bar representing this metric.</p>

<figure class='code'><figcaption><span>index.html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>d3.json(&quot;last_run_report.json&quot;, function(error,json){
</span><span class='line'>          data = json;
</span><span class='line'>          eval_time = data.evaluation_time;
</span><span class='line'>          draw_this.push(eval_time);
</span></code></pre></td></tr></table></div></figure>


<p>Yep, that easy. Pretty rad right? Right.</p>

<p>Now the fun part, let&rsquo;s draw some scalable vector graphics (from here on out referred to by their much less type consuming name &lsquo;svg&rsquo;):</p>

<figure class='code'><figcaption><span>index.html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>         var x = d3.scale.linear()
</span><span class='line'>              .domain([0, d3.max(draw_this)])
</span><span class='line'>              .range([0, 420]);
</span><span class='line'>
</span><span class='line'>          d3.select(&quot;.chart&quot;)
</span><span class='line'>              .selectAll(&quot;div&quot;)
</span><span class='line'>              .data(draw_this)
</span><span class='line'>              .enter().append(&quot;div&quot;)
</span><span class='line'>              .style(&quot;width&quot;, function(d) { return x(d) + &quot;px&quot;; })
</span><span class='line'>              .text(&quot;Evaluation Time&quot;);
</span><span class='line'>              //.text(function(d) { return d; });
</span><span class='line'>      });         
</span><span class='line'>        <span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I start by telling D3 to scale the graph along the &lsquo;x&rsquo; axis because eventually I&rsquo;ll have other bars and I don&rsquo;t want this thing getting out of control, since I am a control freak.</p>

<p>Then we use the ever-so-awesome d3.select. The .select method is great, you could basically script an entire index.html with .select. What&rsquo;s actually happening here is .select is D3&rsquo;s way of saying, &ldquo;Hey DOM, here&rsquo;s a CSS selector, give me the first element match&rdquo;.</p>

<p>You can do .select(&ldquo;body&rdquo;), .select(&ldquo;marquee&rdquo;) (if you&rsquo;re hella adventurous) or if you want to have access to all the DOM elements .selectAll().</p>

<p>I selected my div.chart that I defined earlier, as this is the CSS style I want to push onto my silly bar graph. So all data elements iterated over in .data() will use this style. Notice how .style is automagically added to the DOM for .select() to use down here? That&rsquo;s super cool.</p>

<p>Then we pass my earlier defined array draw_this to .data(). .data is a holder for our soon to be iterated stuff. The magic happens when we use .enter, and wrap our div append in it.</p>

<p>Anytime you bind data to an element (in this case we&rsquo;re binding the array draw_this) you need to use .enter(). We don&rsquo;t actually have any DOM elements for div yet, but we need a placeholder for our data (or whatever data-element binding you might have). .enter() makes this placeholder &ndash; it says, &ldquo;hey I have this data, does the DOM have this data?&rdquo;. If the DOM is like, &ldquo;hell no I have no such data.&rdquo; Then .enter() creates a placeholder for that data.</p>

<p>Don&rsquo;t conflate data with DOM elements. In this example we&rsquo;re passing 1 data value (there only exists one data value in draw_this for now). .enter() will make sure we have placeholder <div> elements to put our data into since they do not exist. So .enter() in this example is making one <div> element PLACEHOLDER (all problems in computer science can be solved by enough levels of abstraction!).</p>

<p>It passes a REFERENCE of this placeholder to the next thing in the chain, in this case an append of <div> which actually inserts our elements into the DOM. We then apply our CSS style to a bar that we defined earlier and does some scaling math so when we have more bars later it won&rsquo;t get out of control and bang, we have a DIV representing our data.</p>

<p>So far our index.html looks like this:</p>

<figure class='code'><figcaption><span>index.html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;head&gt;</span>
</span><span class='line'>        <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;title&gt;</span>D3 Test Visualization for PE Run<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;style&gt;</span>
</span><span class='line'>  <span class="nc">.chart</span> <span class="nt">div</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font</span><span class="o">:</span> <span class="m">10px</span> <span class="k">sans-serif</span><span class="p">;</span>
</span><span class='line'>  <span class="k">background-color</span><span class="o">:</span> <span class="nb">steelblue</span><span class="p">;</span>
</span><span class='line'>  <span class="k">text-align</span><span class="o">:</span> <span class="k">right</span><span class="p">;</span>
</span><span class='line'>  <span class="k">padding</span><span class="o">:</span> <span class="m">3px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin</span><span class="o">:</span> <span class="m">1px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="nb">white</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nt">&lt;/style&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;chart&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://d3js.org/d3.v3.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;body&gt;</span>
</span><span class='line'>        <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      
</span><span class='line'>        <span class="kd">var</span> <span class="nx">data</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">eval_time</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">draw_this</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">d3</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="s2">&quot;last_run_report.json&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span><span class="nx">json</span><span class="p">){</span>
</span><span class='line'>          <span class="nx">data</span> <span class="o">=</span> <span class="nx">json</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">eval_time</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">evaluation_time</span><span class="p">;</span>
</span><span class='line'>          <span class="c1">//alert(eval_time);</span>
</span><span class='line'>          <span class="nx">draw_this</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">eval_time</span><span class="p">);</span>
</span><span class='line'>          
</span><span class='line'>          <span class="c1">//draw something</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">linear</span><span class="p">()</span>
</span><span class='line'>              <span class="p">.</span><span class="nx">domain</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">draw_this</span><span class="p">)])</span>
</span><span class='line'>              <span class="p">.</span><span class="nx">range</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">420</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>          <span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="s2">&quot;.chart&quot;</span><span class="p">)</span>
</span><span class='line'>              <span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s2">&quot;div&quot;</span><span class="p">)</span>
</span><span class='line'>              <span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="nx">draw_this</span><span class="p">)</span>
</span><span class='line'>              <span class="p">.</span><span class="nx">enter</span><span class="p">().</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;div&quot;</span><span class="p">)</span>
</span><span class='line'>              <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="s2">&quot;width&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">x</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;px&quot;</span><span class="p">;</span> <span class="p">})</span>
</span><span class='line'>              <span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">d</span><span class="p">;</span> <span class="p">});</span>
</span><span class='line'>      <span class="p">});</span>          
</span><span class='line'>        <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>OMG IT&rsquo;S SO AWESOME!
<img src="httpL://www.jeffmalnick.com/images/small_example.tiff" title="awesome" alt="images"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Need for a Replication Provider]]></title>
    <link href="httpL://www.jeffmalnick.com/blog/2014/01/03/the-need-to-a-replication-provider/"/>
    <updated>2014-01-03T09:05:51-08:00</updated>
    <id>httpL://www.jeffmalnick.com/blog/2014/01/03/the-need-to-a-replication-provider</id>
    <content type="html"><![CDATA[<h3>Why we need a replication provider for puppet</h3>

<p>I&rsquo;ve been using puppet for over a year now. I started using it at the request of a friend who wanted a simple, one-liner command to boot his e-commerce platform on Vagrant VM&rsquo;s for dev and eventually production. I was impressed by the simplicity, the software defined server-state was easy to create through the elegant package, resource, service workflow. It wasn&rsquo;t very long that we found other more advanced needs for Puppet.</p>

<p>One of these needs was booting multiple MySQL server slaves on a single host machine to replicate various MySQL masters. The masters were any one of the customers currently using this e-commerce platform. The distributed nature of the servers and the cost-benefit of running a single slave server (a beefy host nonetheless) for all of them presented a few challenges.</p>

<p>First off, nobody wants to be a sysadmin. This company was small in terms of manpower and everyone was already in a DevOps role, but who wants to sit around running &ldquo;CHANGE MASTER TO&rdquo;&hellip; all day? Not your python dev that&rsquo;s for sure. So we decided it was best to build out a Puppet module that can run on the slave and master hosts that would:</p>

<ol>
<li>Boot multiple MySQL slaves on one host</li>
<li>Dump the master MySQL DB and scp to the slave (once the slave was provisioned)</li>
<li>Import the scp&#8217;ed DB to the slave and start replication from the correct binlog position</li>
</ol>


<p>Simple right? Yeah&hellip; right.</p>

<p>Let&rsquo;s cut the chase: how many lines of puppet code did it take for me to write a unique mysql slave instance onto a host?</p>

<p>167</p>

<p>For each slave I needed to provision:</p>

<ul>
<li>/var/lib/mysql_instance#</li>
<li>/var/log/mysql_instance#</li>
<li>/etc/mysql_instance#</li>
<li>/etc/mysql_instance#/my.cnf</li>
<li>Customize that my.cnf for the instance</li>
</ul>


<p>Which looks like standard Puppet fun:</p>

<figure class='code'><figcaption><span>slave.pp </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># All SQL instances get their own directories:</span>
</span><span class='line'><span class="n">file</span> <span class="p">{</span> <span class="s2">&quot;/var/lib/mysql${slave_server_id}&quot;</span><span class="p">:</span>
</span><span class='line'>      <span class="k">ensure</span>        <span class="o">=&gt;</span> <span class="n">directory</span><span class="p">,</span>
</span><span class='line'>      <span class="n">recurse</span>        <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>      <span class="n">owner</span>        <span class="o">=&gt;</span> <span class="s1">&#39;mysql&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="n">group</span>        <span class="o">=&gt;</span> <span class="s1">&#39;mysql&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'><span class="n">file</span> <span class="p">{</span> <span class="s2">&quot;/var/log/mysql${slave_server_id}&quot;</span><span class="p">:</span>
</span><span class='line'>      <span class="k">ensure</span>        <span class="o">=&gt;</span> <span class="n">directory</span><span class="p">,</span>
</span><span class='line'>      <span class="n">recurse</span>        <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>      <span class="n">owner</span>        <span class="o">=&gt;</span> <span class="s1">&#39;mysql&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="n">group</span>        <span class="o">=&gt;</span> <span class="s1">&#39;mysql&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># All SQL instances get their own /etc and cnf:</span>
</span><span class='line'><span class="n">file</span> <span class="p">{</span> <span class="s2">&quot;/etc/mysql${slave_server_id}&quot;</span><span class="p">:</span>
</span><span class='line'>      <span class="k">ensure</span>        <span class="o">=&gt;</span> <span class="n">directory</span><span class="p">,</span>
</span><span class='line'>      <span class="n">recurse</span>        <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>      <span class="n">owner</span>        <span class="o">=&gt;</span> <span class="s1">&#39;mysql&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="n">group</span>        <span class="o">=&gt;</span> <span class="s1">&#39;mysql&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'><span class="n">file</span> <span class="p">{</span> <span class="s2">&quot;my${slave_server_id}.cnf&quot;</span><span class="p">:</span>
</span><span class='line'>      <span class="k">ensure</span>         <span class="o">=&gt;</span> <span class="n">file</span><span class="p">,</span>
</span><span class='line'>      <span class="n">path</span>        <span class="o">=&gt;</span> <span class="s2">&quot;/etc/mysql${slave_server_id}/my${slave_server_id}.cnf&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="n">mode</span>        <span class="o">=&gt;</span> <span class="mo">0644</span><span class="p">,</span>
</span><span class='line'>      <span class="n">owner</span>         <span class="o">=&gt;</span> <span class="s1">&#39;mysql&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="n">group</span>         <span class="o">=&gt;</span> <span class="s1">&#39;mysql&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="n">content</span>        <span class="o">=&gt;</span> <span class="n">template</span><span class="p">(</span><span class="s1">&#39;replicate/my.cnf.multi.erb&#39;</span><span class="p">),</span>
</span><span class='line'>      <span class="nb">require</span>        <span class="o">=&gt;</span> <span class="no">File</span><span class="o">[</span><span class="s2">&quot;/etc/mysql${slave_server_id}&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then I needed to boot a DB with the datadir, and from that point on it was, well, you know, a bash script basically with a million exec statements:</p>

<figure class='code'><figcaption><span>slave.pp </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Prepare DB:</span>
</span><span class='line'><span class="nb">exec</span> <span class="p">{</span> <span class="s2">&quot;${name} Initialize Database&quot;</span><span class="p">:</span>
</span><span class='line'>      <span class="n">path</span>        <span class="o">=&gt;</span> <span class="s1">&#39;/usr/bin:/bin&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="n">command</span>        <span class="o">=&gt;</span> <span class="s2">&quot;mysql_install_db --user=mysql --datadir=/var/lib/mysql${slave_server_id}&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nb">require</span>        <span class="o">=&gt;</span> <span class="o">[</span><span class="no">File</span><span class="o">[</span><span class="s2">&quot;/var/lib/mysql${slave_server_id}&quot;</span><span class="o">]</span><span class="p">,</span><span class="no">File</span><span class="o">[</span><span class="s2">&quot;/var/log/mysql${slave_server_id}&quot;</span><span class="o">]]</span><span class="p">,</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Start SQL instance:</span>
</span><span class='line'><span class="nb">exec</span>  <span class="p">{</span> <span class="s2">&quot;$ {name} Spin up SQL Server&quot;</span> <span class="p">:,</span><span class="n">ca</span>
</span><span class='line'>      <span class="n">path</span>        <span class="o">=&gt;</span> <span class="s1">&#39;/bin:/usr/bin:&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="n">command</span>        <span class="o">=&gt;</span> <span class="s2">&quot;mysqld_safe --defaults-file=/etc/mysql${slave_server_id}/my${slave_server_id}.cnf &amp;&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nb">require</span>        <span class="o">=&gt;</span> <span class="o">[</span><span class="no">Exec</span><span class="o">[</span><span class="s2">&quot;${name} Initialize Database&quot;</span><span class="o">]</span><span class="p">,</span><span class="no">File</span><span class="o">[</span><span class="s2">&quot;my${slave_server_id}.cnf&quot;</span><span class="o">]]</span><span class="p">,</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Execute CHANGE MASTER TO - TODO: add if conditional for with password mysql commands</span>
</span><span class='line'><span class="c1"># Grant slave user priviledges if without password:</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="vg">$mysql_root_password</span> <span class="o">==</span> <span class="s2">&quot;false&quot;</span><span class="p">{</span>
</span><span class='line'>      <span class="nb">exec</span>  <span class="p">{</span> <span class="s2">&quot;$ {name} grant privledges&quot;</span> <span class="p">:,</span><span class="n">ca</span>
</span><span class='line'>              <span class="n">command</span>                <span class="o">=&gt;</span> <span class="s2">&quot;$mysql_cmd_root_without_pwd $mysql_socket --execute=</span><span class="se">\&quot;</span><span class="s2">GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO &#39;$mysql_replication_user&#39;@&#39;$slave_ip&#39; IDENTIFIED BY &#39;$mysql_replication_password&#39;;</span><span class="se">\&quot;</span><span class="s2">&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="no">Require</span>                 <span class="o">=&gt;</span>  <span class="no">Exec</span> <span class="o">[</span> <span class="s2">&quot;$ {name} Spin up SQL server&quot;</span> <span class="o">]</span><span class="p">,</span><span class="n">ca</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="nb">exec</span> <span class="p">{</span><span class="s2">&quot;stop ${name}&quot;</span><span class="p">:</span>
</span><span class='line'>              <span class="n">command</span>                <span class="o">=&gt;</span> <span class="s2">&quot;$mysql_cmd_root_without_pwd $mysql_socket --execute=</span><span class="se">\&quot;</span><span class="s2">STOP SLAVE;</span><span class="se">\&quot;</span><span class="s2">&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="nb">require</span>                <span class="o">=&gt;</span> <span class="no">Exec</span><span class="o">[</span><span class="s2">&quot;grant ${name} privledges&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>      <span class="nb">exec</span> <span class="p">{</span><span class="s2">&quot;master info for ${name}&quot;</span><span class="p">:</span>
</span><span class='line'>              <span class="n">command</span>        <span class="o">=&gt;</span> <span class="s2">&quot;$mysql_cmd_root_without_pwd $mysql_socket --execute=</span><span class="se">\&quot;</span><span class="s2">CHANGE MASTER TO MASTER_HOST=&#39;$master_host&#39;,MASTER_USER=&#39;$mysql_replication_user&#39;,MASTER_PASSWORD=&#39;$mysql_replication_password&#39;,MASTER_LOG_FILE=&#39;$master_log_file&#39;,MASTER_LOG_POS=$master_log_pos;</span><span class="se">\&quot;</span><span class="s2">&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="nb">require</span>        <span class="o">=&gt;</span> <span class="no">Exec</span><span class="o">[</span><span class="s2">&quot;stop ${name}&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>      <span class="nb">exec</span> <span class="p">{</span><span class="s2">&quot;start ${name} instnace on server&quot;</span><span class="p">:</span>
</span><span class='line'>              <span class="n">command</span>                <span class="o">=&gt;</span> <span class="s2">&quot;$mysql_cmd_root_without_pwd $mysql_socket --execute=</span><span class="se">\&quot;</span><span class="s2">START SLAVE;</span><span class="se">\&quot;</span><span class="s2">&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="nb">require</span>                <span class="o">=&gt;</span> <span class="no">Exec</span><span class="o">[</span><span class="s2">&quot;master info for ${name}&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>      <span class="nb">exec</span>  <span class="p">{</span> <span class="s2">&quot;$ {name} restart server&quot;</span> <span class="p">:,</span><span class="n">ca</span>
</span><span class='line'>              <span class="n">command</span>        <span class="o">=&gt;</span> <span class="s2">&quot;/usr/bin/mysqladmin -S /var/run/mysqld/mysqld${slave_server_id}.sock stop;</span>
</span><span class='line'><span class="s2">                                     /usr/bin/mysqladmin -S /var/run/mysqld/mysqld${slave_server_id}.sock start&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="nb">require</span>        <span class="o">=&gt;</span> <span class="no">Exec</span><span class="o">[</span><span class="s2">&quot;start ${name} instnace on server&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>              <span class="n">notify</span>        <span class="o">=&gt;</span> <span class="ss">Replicate</span><span class="p">:</span><span class="ss">:Import</span><span class="o">[</span><span class="s2">&quot;Import ${import} onto ${name}&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>But WHAT IF THEY&rsquo;RE CRAZY AND HAVE NO PASSWORD????</p>

<p>I made other commands for that too&hellip;</p>

<figure class='code'><figcaption><span>slave.pp </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="vg">$mysql_root_password</span> <span class="o">!=</span> <span class="s2">&quot;false&quot;</span><span class="p">{</span>
</span><span class='line'><span class="nb">exec</span>  <span class="p">{</span> <span class="s2">&quot;$ {name} grant privledges&quot;</span> <span class="p">:,</span><span class="n">ca</span>
</span><span class='line'>      <span class="n">command</span>                <span class="o">=&gt;</span> <span class="s2">&quot;$mysql_cmd_root_with_pwd $mysql_socket --execute=</span><span class="se">\&quot;</span><span class="s2">GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO &#39;$mysql_replication_user&#39;@&#39;$slave_ip&#39; IDENTIFIED BY &#39;$mysql_replication_password&#39;;</span><span class="se">\&quot;</span><span class="s2">&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="no">Require</span>                 <span class="o">=&gt;</span>  <span class="no">Exec</span> <span class="o">[</span> <span class="s2">&quot;$ {name} Spin up SQL server&quot;</span> <span class="o">]</span><span class="p">,</span><span class="n">ca</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">exec</span> <span class="p">{</span><span class="s2">&quot;stop ${name}&quot;</span><span class="p">:</span>
</span><span class='line'>      <span class="n">command</span>                <span class="o">=&gt;</span> <span class="s2">&quot;$mysql_cmd_root_with_pwd $mysql_socket --execute=</span><span class="se">\&quot;</span><span class="s2">STOP SLAVE;</span><span class="se">\&quot;</span><span class="s2">&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nb">require</span>                <span class="o">=&gt;</span> <span class="no">Exec</span><span class="o">[</span><span class="s2">&quot;grant ${name} privledges&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'><span class="nb">exec</span> <span class="p">{</span><span class="s2">&quot;master info for ${name}&quot;</span><span class="p">:</span>
</span><span class='line'>      <span class="n">command</span>        <span class="o">=&gt;</span> <span class="s2">&quot;$mysql_cmd_root_with_pwd $mysql_socket --execute=</span><span class="se">\&quot;</span><span class="s2">CHANGE MASTER TO MASTER_HOST=&#39;$master_host&#39;,MASTER_USER=&#39;$mysql_replication_user&#39;,MASTER_PASSWORD=&#39;$mysql_replication_password&#39;,MASTER_LOG_FILE=&#39;$master_log_file&#39;,MASTER_LOG_POS=$master_log_pos;</span><span class="se">\&quot;</span><span class="s2">&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nb">require</span>        <span class="o">=&gt;</span> <span class="no">Exec</span><span class="o">[</span><span class="s2">&quot;stop ${name}&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'><span class="nb">exec</span> <span class="p">{</span><span class="s2">&quot;start ${name} instnace on server&quot;</span><span class="p">:</span>
</span><span class='line'>      <span class="n">command</span>                <span class="o">=&gt;</span> <span class="s2">&quot;$mysql_cmd_root_with_pwd $mysql_socket --execute=</span><span class="se">\&quot;</span><span class="s2">START SLAVE;</span><span class="se">\&quot;</span><span class="s2">&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nb">require</span>                <span class="o">=&gt;</span> <span class="no">Exec</span><span class="o">[</span><span class="s2">&quot;master info for ${name}&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'><span class="nb">exec</span>  <span class="p">{</span> <span class="s2">&quot;$ {name} restart server&quot;</span> <span class="p">:,</span><span class="n">ca</span>
</span><span class='line'>      <span class="n">command</span>        <span class="o">=&gt;</span> <span class="s2">&quot;/usr/bin/mysqladmin -S /var/run/mysqld/mysqld${slave_server_id}.sock stop;</span>
</span><span class='line'><span class="s2">                             /usr/bin/mysqladmin -S /var/run/mysqld/mysqld${slave_server_id}.sock start&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nb">require</span>        <span class="o">=&gt;</span> <span class="no">Exec</span><span class="o">[</span><span class="s2">&quot;start ${name} instnace on server&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="n">notify</span>        <span class="o">=&gt;</span> <span class="ss">Replicate</span><span class="p">:</span><span class="ss">:Import</span><span class="o">[</span><span class="s2">&quot;Import ${import} onto ${name}&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>SO MANY COMMANDS!!!</p>

<p>Any post where you need to exclaim this much in caps says a lot about the code you&rsquo;re writing right? Right. That&rsquo;s a principle.</p>

<p>So this is where providers come in. In Puppet you could write this code to do this work. And I mean, that&rsquo;s what Puppet is for right? Provisioning. Yes,
that&rsquo;s true, but this isn&rsquo;t really* Puppet code, this is a bunch of exec statements, which is basically a bash script. This isn&rsquo;t very economical, it&rsquo;s
not very elegant, it&rsquo;s a lot of coding. Would it be nice if we could just:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">replicate_server</span> <span class="p">{</span> <span class="s1">&#39;master&#39;</span><span class="p">:</span>
</span><span class='line'>  <span class="n">hostname</span>             <span class="o">=&gt;</span> <span class="vg">$:</span><span class="ss">:hostname</span><span class="p">,</span>
</span><span class='line'>  <span class="n">mysql_repl_password</span> <span class="o">=&gt;</span> <span class="s2">&quot;1234&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="n">mysql_repl_user</span>      <span class="o">=&gt;</span> <span class="s2">&quot;repl&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="n">server_id</span>            <span class="o">=&gt;</span> <span class="mi">21</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip; in our provisioning manifest and not have to write this crazy defined type for each SQL slave? Because right now as it stands my slave.pp for the replicate class is
167 lines. There are, umm, a lot of other subclasses there to enable this to work. Like the master.pp, my params, some crap about dumping DB&rsquo;s and blowing out
the old ib_log files and holy shit that&rsquo;s a lot of puppeteering.</p>

<p>I would much rather have a provider that&rsquo;s pure ruby which can provision this for me. (WARNING PSUDO PROVIDER COMING).</p>

<p>Something like this for the commands (of which, as you can see from above, are crazy nuts since it&rsquo;s puppet telling bash telling mysql telling mysql instance&hellip;):</p>

<figure class='code'><figcaption><span>/ modules / replicate / lib / puppet / provider / replicate / replication.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">Puppet</span><span class="p">:</span><span class="ss">:Type</span><span class="o">.</span><span class="n">type</span><span class="p">(</span><span class="ss">:replicate</span><span class="p">)</span><span class="o">.</span><span class="n">provide</span><span class="p">(</span><span class="ss">:replication</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">#confine :osfamily =&gt; [:debian, :redhat]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Commands </span>
</span><span class='line'>
</span><span class='line'>        <span class="n">commands</span>         <span class="ss">:mysql</span>             <span class="o">=&gt;</span> <span class="s2">&quot;/usr/bin/mysql&quot;</span>
</span><span class='line'>        <span class="n">commands</span>         <span class="ss">:mysqladmin</span>        <span class="o">=&gt;</span> <span class="s2">&quot;/usr/bin/mysqladmin&quot;</span>
</span><span class='line'>        <span class="n">commands</span>         <span class="ss">:service</span>           <span class="o">=&gt;</span> <span class="s2">&quot;/etc/init.d/mysql&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ahhhh, ok that&#8217; better than:</p>

<figure class='code'><figcaption><span>slave.pp </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$mysql_cmd_root_without_pwd</span> <span class="o">=</span> <span class="s2">&quot;/usr/bin/mysql --user=$mysql_root_user --database=$mysql_database --host=$mysql_root_local_host&quot;</span>
</span><span class='line'><span class="vg">$mysql_cmd_root_with_pwd</span>    <span class="o">=</span> <span class="s2">&quot;/usr/bin/mysql --user=$mysql_root_user --database=$mysql_database --host=$mysql_root_local_host --password=$mysql_root_password&quot;</span>
</span><span class='line'><span class="vg">$mysql_cmd_repl_with_pwd</span>    <span class="o">=</span> <span class="s2">&quot;/usr/bin/mysql --user=$mysql_replication_user --database=$mysql_database --host=$mysql_root_local_host --password=$mysql_replication_password&quot;</span>
</span><span class='line'><span class="vg">$mysql_cmd_repl_slave</span>       <span class="o">=</span> <span class="s2">&quot;/usr/bin/mysql --user=$mysql_replication_user --database=$mysql_database --host=$mysql_master_ip_address --password=$mysql_replication_password&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we could write a out a single provider and corresponding type which defines the instance based on &ldquo;roles&rdquo; of &ldquo;master&rdquo; or &ldquo;slave&rdquo;. The provider would figure out if this host
already has a master or slave instance running on it, which my replication module &hellip; does not do .. which, you guessed it, could break a lot of stuff if you run it twice.</p>

<p>Which brings us to&hellip;</p>

<h4>A provider, when done correctly is idempotent!</h4>

<p>&hellip; and that&rsquo;s not all, if the replication provider is built-in we can use &lsquo;puppet resource replicate&rsquo; on the command line for all things replication related.</p>

<p>Let&rsquo;s say we wanted to query the master SQL instances
on this host, we could:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ puppet resource replicate role=master </span></code></pre></td></tr></table></div></figure>


<p>and get something like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>replicate {"master":
</span><span class='line'>  ensure =&gt; present,
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<p>if this host has a master instance running on it.</p>

<p>This is of course provided by the magic of self.instances in the provider. Here&rsquo;s some more psudo ruby of what that might look like:</p>

<figure class='code'><figcaption><span>Psudo-Provider </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">instances</span>
</span><span class='line'>  <span class="n">get_master_instances</span><span class="p">()</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">get_master_instances</span><span class="p">()</span>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;get master info&quot;</span>
</span><span class='line'>  <span class="n">mstr_info</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>          <span class="n">output</span> <span class="o">=</span> <span class="sb">`mysql -NBe &quot;show master status&quot;`</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span><span class="o">.</span><span class="n">collect</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:strip</span><span class="p">)</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="ss">Puppet</span><span class="p">:</span><span class="ss">:ExecutionFailure</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>              <span class="k">raise</span> <span class="ss">Puppet</span><span class="p">:</span><span class="ss">:Error</span><span class="p">,</span> <span class="s2">&quot;Oh no, execution of &#39;show master status&#39; for MySQL failed&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">mstr_info</span><span class="o">[</span><span class="ss">:ensure</span><span class="o">]</span> <span class="o">=</span> <span class="n">output</span> <span class="o">==</span> <span class="kp">nil</span> <span class="p">?</span> <span class="ss">:absent</span> <span class="p">:</span> <span class="ss">:present</span>
</span><span class='line'>  <span class="n">mstr_info</span><span class="o">[</span><span class="ss">:log_position</span><span class="o">]</span> <span class="o">=</span> <span class="n">output</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">empty?</span> <span class="p">?</span> <span class="kp">nil</span> <span class="p">:</span> <span class="n">output</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>  <span class="n">mstr_info</span><span class="o">[</span><span class="ss">:binlog_do_db</span><span class="o">]</span> <span class="o">=</span> <span class="n">output</span><span class="o">[</span><span class="mi">2</span><span class="o">].</span><span class="n">empty?</span> <span class="p">?</span> <span class="kp">nil</span> <span class="p">:</span> <span class="n">output</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'>  <span class="c1">#mstr_info[:provider] = :ruby</span>
</span><span class='line'>  <span class="n">mstr_info</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span> <span class="o">=</span> <span class="ss">:binlog_do_db</span>
</span><span class='line'>  <span class="n">mstr_info</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And return the instances.</p>

<p>Now the provider would have to be written with the duel nature of master/slave replication in mind. Unless you want to have multiple providers, one for each of the roles of master or slave.
However I think it would be easier to write it into a single provider that discriminates based on the &lsquo;role&rsquo; parameter in the type.</p>

<p>But I digress, let&rsquo;s get back to the meat of this thing.</p>

<p>The awesome thing about having a provider do this work for us is that we don&rsquo;t have to worry about all the module-related debugging, platform dependancies and none-idempotent nature of a standalone replication
module (*cough .. my replication module, which I did not write with idempotentcy in mind). We have better integration with puppet through the use of &lsquo;puppet resource&rsquo; &ndash; it inherently is far more extendable than a standalone module  and integrates well with most puppet platform distributions.
The coding for it is far more economical, and we don&rsquo;t have a psudo-bash script written into our Puppet code via exec!</p>

<p>You get to write your puppet code to do puppet stuff and let the provider/type ruby magic do it&rsquo;s work for you. It&rsquo;s a win win, now all we need to do is actually write this thing&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blog Post #1]]></title>
    <link href="httpL://www.jeffmalnick.com/blog/2014/01/02/blog-post-number-1/"/>
    <updated>2014-01-02T10:52:00-08:00</updated>
    <id>httpL://www.jeffmalnick.com/blog/2014/01/02/blog-post-number-1</id>
    <content type="html"><![CDATA[<p>Is this thing on?</p>
]]></content>
  </entry>
  
</feed>
